{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"American Football Game Where the lives of your players are as important as their stats. Imagine a text-based sports simulation where every season unfolds like a captivating novel. Our game uses advanced AI to generate dynamic play-by-play, craft unique athlete personalities that drives locker room drama and media firestorms, and even create vivid images for characters and pivotal game moments. It's not just about stats; it's about building your dynasty through an endlessly evolving, character-driven narrative. I'm not just simulating the sport; I'm simulating the lives of those who live it. These are the planning documents for a deep American football simulation and role-playing game. Players will manage teams across multiple tiered leagues, focusing on strategic playbook creation, statistical analysis, and narrative-driven interactions. The game uses AI to produce truly unique content that drives immersion, making each playthrough a distinct experience. This is a hobby project, created for fun and to connect with my nephews and practice my trade of software development and one of my longest standing interests, data and analytics. I will release all of my own code under a FOSS license. The game will likely require a paid LLM API key to run. I cannot provide these, so users will need to supply their own. If the game were to gather the required audience I might offer to host leagues for some small fee. The following documents provide a suggested order for reading and understanding the project. Vision : Overall game concept. MVP : The definition of the Minimum Viable Product. Roadmap : Milestones leading to the MVP. Milestones : Documents for each specific milestone. Technical Information : Technical requirements, stack, and data storage strategy. Inspirations : Games and ideas that inspire this project. Feature Catalog : A categorized list of potential features. Architecture : High-level system architecture. Data Models : Detailed database schema and data models. Glossary : Glossary of key terms and concepts. Research Notes : Useful research and findings. Planning Notes : Raw, unstructured planning notes.","title":"American Football Game"},{"location":"#american-football-game","text":"","title":"American Football Game"},{"location":"#where-the-lives-of-your-players-are-as-important-as-their-stats","text":"Imagine a text-based sports simulation where every season unfolds like a captivating novel. Our game uses advanced AI to generate dynamic play-by-play, craft unique athlete personalities that drives locker room drama and media firestorms, and even create vivid images for characters and pivotal game moments. It's not just about stats; it's about building your dynasty through an endlessly evolving, character-driven narrative. I'm not just simulating the sport; I'm simulating the lives of those who live it. These are the planning documents for a deep American football simulation and role-playing game. Players will manage teams across multiple tiered leagues, focusing on strategic playbook creation, statistical analysis, and narrative-driven interactions. The game uses AI to produce truly unique content that drives immersion, making each playthrough a distinct experience. This is a hobby project, created for fun and to connect with my nephews and practice my trade of software development and one of my longest standing interests, data and analytics. I will release all of my own code under a FOSS license. The game will likely require a paid LLM API key to run. I cannot provide these, so users will need to supply their own. If the game were to gather the required audience I might offer to host leagues for some small fee. The following documents provide a suggested order for reading and understanding the project. Vision : Overall game concept. MVP : The definition of the Minimum Viable Product. Roadmap : Milestones leading to the MVP. Milestones : Documents for each specific milestone. Technical Information : Technical requirements, stack, and data storage strategy. Inspirations : Games and ideas that inspire this project. Feature Catalog : A categorized list of potential features. Architecture : High-level system architecture. Data Models : Detailed database schema and data models. Glossary : Glossary of key terms and concepts. Research Notes : Useful research and findings. Planning Notes : Raw, unstructured planning notes.","title":"Where the lives of your players are as important as their stats."},{"location":"project/inspirations/","text":"Inspirations These are the closest existing attempts that I'm aware of, similar to what I want to create in relation to the subject and general ideas about what should be included in the game. There are features I would love to be added to these games and there are features included in these games that I don't care much about but I have enjoyed each of them at some point in my life. Front Office Football & Bowl Bound: The College Years Football Manager X Out of the Park Baseball X TEW: Total Extreme Wrestling Crusader Kings 3 Front Office Football & Bowl Bound, The College Years : Similarities: Focus on the American sport Football. Simulates the responsibilities of being the general manager, coach, front office, god position for a team or league. Major focus on statistics. Think lots of tables in the UI, lots of rows of data. Studying data, making educated guesses based on probabilities will be the 'game loop' with the user making decisions based on their role during different periods of the season. Like the draft, free agency, training camp, preseason, season. Differences: Focus on constructing a playbook. While this is the most important mechanic for the user affecting the outcome of the game it was also very time consuming in both of FOF and BB: TCY , I would like to develop a simpler solution while still relying on it as a very impactful gameplay mechanic. I want to merge the FOF and BB: TCY so that you can acquire a position at either level, college or pros. Also the universe will consist of more than a single pro league, obviously. International Leagues and lesser leagues like arena league with slightly different rules will be included. Football Manager X Similarities: I prefer the UI in FM to any of the other listed games. It is sometimes unresponsive but FM is a massive game so is somewhat understandable. European soccer uses the concept of tiered leagues, that I would like to replicate. Differences: Obviously the subject of the game is European football and not American Football. The architecture will be designed with future multiplayer support in mind from the beginning, ensuring it is a core part of the game's structure rather than a post-launch addition. I won't have any visual representation of games happening, at least not in 3d. I will add a 2d representation when I feel the time is right. Out of the Park Baseball X Similarities: OOTP has an excellent system to modify individual league simulation parameter weights, for any league in the universe. This is fantastic, because some leagues could use a different set of rules that impact the statistics produced. Some leagues might get the reputation as a high/low scoring league, have exceptionally high/low rushing/passing yards and many other parameters to set that affect the simulation engine. Differences: Obviously the subject of the game is baseball and not American Football. OOTP doesn't contain many role playing elements. In my game, you as a character will get a Legacy Score , which will be the official measurement of success. The score will have different components\u2014professional and non-professional\u2014and the choices you make can benefit one while penalizing the other. There will also be role playing elements with fans, media, and family members that can affect these scores. I also want to include management of your personal assets; if you own or manage multiple teams, you'll have to manage your time. Teams will need to run like a business, setting prices, balancing budgets, deciding on promotions, sponsorships, etc. TEW: Total Extreme Wrestling Similarities: This game revolves around a wrestling universe and requires the user to make fictional narratives for their characters. My game will rely heavily on this narrative building to aid immersion. Stories, events and interactions like with reporters, fans, family, players, staff, as well as team art and player and game images will be generated by a large language model. Differences: Obviously the subject of the game is professional wrestling and not American Football. This game is far more free form than what I am trying to build; the main object is to aid the player in building a 'story'. That is also what I am trying to accomplish but with more structure and strategic decision making. In TEW you are truly 'god' determining the outcome of matches, the only real 'game' in TEW is trying to draw more ratings for your wrestling association. I want to do that but not give the player the ability to decide outcomes of matches as well as all the other elements I mentioned. Crusader Kings 3 Similarities: Role-playing game first. Many different strategies could be employed to win. The game isn't obsessed with declaring a winner or loser. The game is best played when the user sets a goal for himself that isn't strictly considered victory. Differences: Obviously subject matter. CK3 is a simulation about managing a family dynasty during medieval times. While the historical setting is vastly different, the underlying mechanics of character-driven storytelling and generational play are core inspirations for the role-playing elements of this game.","title":"Inspirations"},{"location":"project/inspirations/#inspirations","text":"These are the closest existing attempts that I'm aware of, similar to what I want to create in relation to the subject and general ideas about what should be included in the game. There are features I would love to be added to these games and there are features included in these games that I don't care much about but I have enjoyed each of them at some point in my life. Front Office Football & Bowl Bound: The College Years Football Manager X Out of the Park Baseball X TEW: Total Extreme Wrestling Crusader Kings 3 Front Office Football & Bowl Bound, The College Years : Similarities: Focus on the American sport Football. Simulates the responsibilities of being the general manager, coach, front office, god position for a team or league. Major focus on statistics. Think lots of tables in the UI, lots of rows of data. Studying data, making educated guesses based on probabilities will be the 'game loop' with the user making decisions based on their role during different periods of the season. Like the draft, free agency, training camp, preseason, season. Differences: Focus on constructing a playbook. While this is the most important mechanic for the user affecting the outcome of the game it was also very time consuming in both of FOF and BB: TCY , I would like to develop a simpler solution while still relying on it as a very impactful gameplay mechanic. I want to merge the FOF and BB: TCY so that you can acquire a position at either level, college or pros. Also the universe will consist of more than a single pro league, obviously. International Leagues and lesser leagues like arena league with slightly different rules will be included. Football Manager X Similarities: I prefer the UI in FM to any of the other listed games. It is sometimes unresponsive but FM is a massive game so is somewhat understandable. European soccer uses the concept of tiered leagues, that I would like to replicate. Differences: Obviously the subject of the game is European football and not American Football. The architecture will be designed with future multiplayer support in mind from the beginning, ensuring it is a core part of the game's structure rather than a post-launch addition. I won't have any visual representation of games happening, at least not in 3d. I will add a 2d representation when I feel the time is right. Out of the Park Baseball X Similarities: OOTP has an excellent system to modify individual league simulation parameter weights, for any league in the universe. This is fantastic, because some leagues could use a different set of rules that impact the statistics produced. Some leagues might get the reputation as a high/low scoring league, have exceptionally high/low rushing/passing yards and many other parameters to set that affect the simulation engine. Differences: Obviously the subject of the game is baseball and not American Football. OOTP doesn't contain many role playing elements. In my game, you as a character will get a Legacy Score , which will be the official measurement of success. The score will have different components\u2014professional and non-professional\u2014and the choices you make can benefit one while penalizing the other. There will also be role playing elements with fans, media, and family members that can affect these scores. I also want to include management of your personal assets; if you own or manage multiple teams, you'll have to manage your time. Teams will need to run like a business, setting prices, balancing budgets, deciding on promotions, sponsorships, etc. TEW: Total Extreme Wrestling Similarities: This game revolves around a wrestling universe and requires the user to make fictional narratives for their characters. My game will rely heavily on this narrative building to aid immersion. Stories, events and interactions like with reporters, fans, family, players, staff, as well as team art and player and game images will be generated by a large language model. Differences: Obviously the subject of the game is professional wrestling and not American Football. This game is far more free form than what I am trying to build; the main object is to aid the player in building a 'story'. That is also what I am trying to accomplish but with more structure and strategic decision making. In TEW you are truly 'god' determining the outcome of matches, the only real 'game' in TEW is trying to draw more ratings for your wrestling association. I want to do that but not give the player the ability to decide outcomes of matches as well as all the other elements I mentioned. Crusader Kings 3 Similarities: Role-playing game first. Many different strategies could be employed to win. The game isn't obsessed with declaring a winner or loser. The game is best played when the user sets a goal for himself that isn't strictly considered victory. Differences: Obviously subject matter. CK3 is a simulation about managing a family dynasty during medieval times. While the historical setting is vastly different, the underlying mechanics of character-driven storytelling and generational play are core inspirations for the role-playing elements of this game.","title":"Inspirations"},{"location":"project/mvp/","text":"Minimum Viable Product This MVP is focused on delivering a functional core football simulation. The deep, narrative-driven role-playing elements outlined in the Vision will be the focus of subsequent development milestones, building upon this playable foundation. World Basic Economy League One full league. 8 teams. 7-game, round-robin generated schedule. Post Season, configured for 1 bowl game. 1 playable season including playoffs. Fully generated rosters. NPC Browser. Team Simplified playbook selection. No play editing. Game Player Role: The player assumes the role of a Head Coach/GM. Gameplay is centered on giving high-level strategic direction to subordinate AI coordinators, who then call the specific plays. Strategic Control: Pre-Game Strategy: Set situational tendencies via sliders, such as pass/run ratios for specific downs (e.g., 60/40 pass on 1st & 10). In-Game Adjustments: Issue broad commands during the game to alter strategy, such as 'Run more on 1st down' or 'Go to 2-minute offense'. Simulation & Reporting: A full game is simulated with adjustable speed. Every snap is recorded with a text description and updates all relevant player statistics. Full game logs are generated, including a play-by-play log and a complete box score.","title":"Minimum Viable Product"},{"location":"project/mvp/#minimum-viable-product","text":"This MVP is focused on delivering a functional core football simulation. The deep, narrative-driven role-playing elements outlined in the Vision will be the focus of subsequent development milestones, building upon this playable foundation.","title":"Minimum Viable Product"},{"location":"project/mvp/#world","text":"Basic Economy","title":"World"},{"location":"project/mvp/#league","text":"One full league. 8 teams. 7-game, round-robin generated schedule. Post Season, configured for 1 bowl game. 1 playable season including playoffs. Fully generated rosters. NPC Browser.","title":"League"},{"location":"project/mvp/#team","text":"Simplified playbook selection. No play editing.","title":"Team"},{"location":"project/mvp/#game","text":"Player Role: The player assumes the role of a Head Coach/GM. Gameplay is centered on giving high-level strategic direction to subordinate AI coordinators, who then call the specific plays. Strategic Control: Pre-Game Strategy: Set situational tendencies via sliders, such as pass/run ratios for specific downs (e.g., 60/40 pass on 1st & 10). In-Game Adjustments: Issue broad commands during the game to alter strategy, such as 'Run more on 1st down' or 'Go to 2-minute offense'. Simulation & Reporting: A full game is simulated with adjustable speed. Every snap is recorded with a text description and updates all relevant player statistics. Full game logs are generated, including a play-by-play log and a complete box score.","title":"Game"},{"location":"project/roadmap/","text":"Development Roadmap This document outlines the major milestones for building the football simulation game. Each milestone builds upon the previous one, progressively adding layers of functionality to create a complete simulation experience. The first six milestones collectively represent the work required to deliver the core features outlined in the Minimum Viable Product (MVP) . Milestone 7, the Off-Season Simulation, will be the first major feature implemented after the MVP is complete, paving the way for long-term replayability and the future introduction of role-playing elements. Table of Contents Milestone 1: Foundational Scaffolding Milestone 2: Entity Generation Milestone 3: Single Play Simulation Milestone 4: Drive (Set of Downs) Simulation Milestone 5: Full Game Simulation Milestone 6: Season Simulation Milestone 7: Off-Season Simulation Milestone 1: Foundational Scaffolding Explanation This initial phase involves setting up the core project structure, database, and a basic interface for developer interaction. It's about building the foundation upon which all other features will be built. Discussion The primary goal is to translate the schemas in technical/data_models.md into a functioning database. A basic interface (likely a command-line tool or simple test harness) will be needed to perform CRUD (Create, Read, Update, Delete) operations on core tables like world , country , and league . This allows for initial data setup and testing. Observations The interface at this stage is purely for development and testing, not for end-users. Focus on data integrity, foreign key relationships, and ensuring the database schema is robust. Milestone 2: Entity Generation Explanation Implement the logic to dynamically create game entities, specifically Team and Player records. This milestone brings the Entity Generation Models ( Archetype , Generation Configuration ) to life. Discussion A generation module will be built to: 1. Create Team records and populate their basic information. 2. For each team, generate a roster of Player entities. This involves creating an individual record and a corresponding player record. 3. The generation logic will be driven by archetype_attribute data, using the base_value plus randomization to create varied players. Observations As noted in the original plan, the initial generation does not need to be perfectly balanced. The focus is on creating the scaffolding to populate the database with test data, which can be manually triggered. Milestone 3: Single Play Simulation Explanation Develop the core simulation engine capable of executing a single offensive play, from snap to whistle. Discussion This is the implementation of the Simulation Engine Architecture . It involves a tick-based loop where each of the 22 players on the field is processed. In each tick, players perceive their environment, decide on an action (move, interact), and their actions are resolved. The loop terminates when a play-ending condition (tackle, touchdown, out-of-bounds) is met. Observations What happens between plays? This is a critical transition. After the simulation loop ends, the results must be persisted. The game state (down, distance, ball position) is updated, and a new record is created in the play table to log what happened. Milestone 4: Drive (Set of Downs) Simulation Explanation Chain together multiple \"Single Play Simulations\" to create a continuous offensive drive. This includes handling first downs and changes of possession. Discussion A new, higher-level loop will manage a series of plays. After each play, this \"drive manager\" will check the game state to determine the result: - Was a first down achieved? - Was it a turnover? - Was it a scoring play? - Is it now 4th down? Observations This is where 4th down decision-making AI (punt, field goal, go for it) becomes necessary. Simulating special teams plays (punts, field goals, kickoffs) is a prerequisite for a complete drive simulation, especially for handling scoring and changes of possession. Milestone 5: Full Game Simulation Explanation Expand the simulation to cover a full game, including clock management, quarters, halftime, and overtime. Discussion A \"game loop\" will wrap the \"drive simulation\" logic. This top-level loop is responsible for managing the game clock, advancing it based on the outcome and duration of each play. It will handle events like the opening kickoff, halftime, quarter breaks, and the final whistle. Observations What happens between games? After a game concludes, a post-game process must run. This involves finalizing statistics, updating team win/loss records, and laying the groundwork for the narrative engine by triggering basic player morale changes. Milestone 6: Season Simulation Explanation Simulate an entire league season from week 1 through the playoffs and championship game. Discussion This involves creating a season scheduler that generates a full schedule of games based on the teams in a League . A \"season loop\" will iterate week-by-week ( world.current_week ), triggering the \"Full Game Simulation\" for all games in that week. It must also track league standings. Observations After the regular season is complete, the logic must identify qualifying teams and initiate the playoffs according to the playoff_format defined for the league. Milestone 7: Off-Season Simulation Explanation Implement the series of events and phases that occur between the end of one season and the beginning of the next. Discussion The off-season is the core of long-term franchise management and world evolution. It is not a single process but a sequence of distinct phases that must be executed in order: 1. Player Retirements & Staff Changes 2. End-of-Season Awards 3. New Player Generation (Draft / Youth Intake) 4. Free Agency & Contract Negotiations 5. Pre-season / Training Camp Observations What happens between seasons? This is where the game world truly evolves. The generation_config models are critical for creating new talent pools. Player aging and attribute progression/regression systems must be processed. This phase is essential for long-term replayability.","title":"Development Roadmap"},{"location":"project/roadmap/#development-roadmap","text":"This document outlines the major milestones for building the football simulation game. Each milestone builds upon the previous one, progressively adding layers of functionality to create a complete simulation experience. The first six milestones collectively represent the work required to deliver the core features outlined in the Minimum Viable Product (MVP) . Milestone 7, the Off-Season Simulation, will be the first major feature implemented after the MVP is complete, paving the way for long-term replayability and the future introduction of role-playing elements.","title":"Development Roadmap"},{"location":"project/roadmap/#table-of-contents","text":"Milestone 1: Foundational Scaffolding Milestone 2: Entity Generation Milestone 3: Single Play Simulation Milestone 4: Drive (Set of Downs) Simulation Milestone 5: Full Game Simulation Milestone 6: Season Simulation Milestone 7: Off-Season Simulation","title":"Table of Contents"},{"location":"project/roadmap/#milestone-1-foundational-scaffolding","text":"","title":"Milestone 1: Foundational Scaffolding"},{"location":"project/roadmap/#explanation","text":"This initial phase involves setting up the core project structure, database, and a basic interface for developer interaction. It's about building the foundation upon which all other features will be built.","title":"Explanation"},{"location":"project/roadmap/#discussion","text":"The primary goal is to translate the schemas in technical/data_models.md into a functioning database. A basic interface (likely a command-line tool or simple test harness) will be needed to perform CRUD (Create, Read, Update, Delete) operations on core tables like world , country , and league . This allows for initial data setup and testing.","title":"Discussion"},{"location":"project/roadmap/#observations","text":"The interface at this stage is purely for development and testing, not for end-users. Focus on data integrity, foreign key relationships, and ensuring the database schema is robust.","title":"Observations"},{"location":"project/roadmap/#milestone-2-entity-generation","text":"","title":"Milestone 2: Entity Generation"},{"location":"project/roadmap/#explanation_1","text":"Implement the logic to dynamically create game entities, specifically Team and Player records. This milestone brings the Entity Generation Models ( Archetype , Generation Configuration ) to life.","title":"Explanation"},{"location":"project/roadmap/#discussion_1","text":"A generation module will be built to: 1. Create Team records and populate their basic information. 2. For each team, generate a roster of Player entities. This involves creating an individual record and a corresponding player record. 3. The generation logic will be driven by archetype_attribute data, using the base_value plus randomization to create varied players.","title":"Discussion"},{"location":"project/roadmap/#observations_1","text":"As noted in the original plan, the initial generation does not need to be perfectly balanced. The focus is on creating the scaffolding to populate the database with test data, which can be manually triggered.","title":"Observations"},{"location":"project/roadmap/#milestone-3-single-play-simulation","text":"","title":"Milestone 3: Single Play Simulation"},{"location":"project/roadmap/#explanation_2","text":"Develop the core simulation engine capable of executing a single offensive play, from snap to whistle.","title":"Explanation"},{"location":"project/roadmap/#discussion_2","text":"This is the implementation of the Simulation Engine Architecture . It involves a tick-based loop where each of the 22 players on the field is processed. In each tick, players perceive their environment, decide on an action (move, interact), and their actions are resolved. The loop terminates when a play-ending condition (tackle, touchdown, out-of-bounds) is met.","title":"Discussion"},{"location":"project/roadmap/#observations_2","text":"What happens between plays? This is a critical transition. After the simulation loop ends, the results must be persisted. The game state (down, distance, ball position) is updated, and a new record is created in the play table to log what happened.","title":"Observations"},{"location":"project/roadmap/#milestone-4-drive-set-of-downs-simulation","text":"","title":"Milestone 4: Drive (Set of Downs) Simulation"},{"location":"project/roadmap/#explanation_3","text":"Chain together multiple \"Single Play Simulations\" to create a continuous offensive drive. This includes handling first downs and changes of possession.","title":"Explanation"},{"location":"project/roadmap/#discussion_3","text":"A new, higher-level loop will manage a series of plays. After each play, this \"drive manager\" will check the game state to determine the result: - Was a first down achieved? - Was it a turnover? - Was it a scoring play? - Is it now 4th down?","title":"Discussion"},{"location":"project/roadmap/#observations_3","text":"This is where 4th down decision-making AI (punt, field goal, go for it) becomes necessary. Simulating special teams plays (punts, field goals, kickoffs) is a prerequisite for a complete drive simulation, especially for handling scoring and changes of possession.","title":"Observations"},{"location":"project/roadmap/#milestone-5-full-game-simulation","text":"","title":"Milestone 5: Full Game Simulation"},{"location":"project/roadmap/#explanation_4","text":"Expand the simulation to cover a full game, including clock management, quarters, halftime, and overtime.","title":"Explanation"},{"location":"project/roadmap/#discussion_4","text":"A \"game loop\" will wrap the \"drive simulation\" logic. This top-level loop is responsible for managing the game clock, advancing it based on the outcome and duration of each play. It will handle events like the opening kickoff, halftime, quarter breaks, and the final whistle.","title":"Discussion"},{"location":"project/roadmap/#observations_4","text":"What happens between games? After a game concludes, a post-game process must run. This involves finalizing statistics, updating team win/loss records, and laying the groundwork for the narrative engine by triggering basic player morale changes.","title":"Observations"},{"location":"project/roadmap/#milestone-6-season-simulation","text":"","title":"Milestone 6: Season Simulation"},{"location":"project/roadmap/#explanation_5","text":"Simulate an entire league season from week 1 through the playoffs and championship game.","title":"Explanation"},{"location":"project/roadmap/#discussion_5","text":"This involves creating a season scheduler that generates a full schedule of games based on the teams in a League . A \"season loop\" will iterate week-by-week ( world.current_week ), triggering the \"Full Game Simulation\" for all games in that week. It must also track league standings.","title":"Discussion"},{"location":"project/roadmap/#observations_5","text":"After the regular season is complete, the logic must identify qualifying teams and initiate the playoffs according to the playoff_format defined for the league.","title":"Observations"},{"location":"project/roadmap/#milestone-7-off-season-simulation","text":"","title":"Milestone 7: Off-Season Simulation"},{"location":"project/roadmap/#explanation_6","text":"Implement the series of events and phases that occur between the end of one season and the beginning of the next.","title":"Explanation"},{"location":"project/roadmap/#discussion_6","text":"The off-season is the core of long-term franchise management and world evolution. It is not a single process but a sequence of distinct phases that must be executed in order: 1. Player Retirements & Staff Changes 2. End-of-Season Awards 3. New Player Generation (Draft / Youth Intake) 4. Free Agency & Contract Negotiations 5. Pre-season / Training Camp","title":"Discussion"},{"location":"project/roadmap/#observations_6","text":"What happens between seasons? This is where the game world truly evolves. The generation_config models are critical for creating new talent pools. Player aging and attribute progression/regression systems must be processed. This phase is essential for long-term replayability.","title":"Observations"},{"location":"project/vision/","text":"Vision This document outlines the core vision for Football Sim, a game that blends deep football management with personal role-playing. The Playable Character The player experience is centered around the life and career of a professional in the world of American football. Core Role: A Career in Football The player's experience is centered on a character navigating a career within the world of American football. While the primary gameplay focuses on management roles like a General Manager or Team Owner, the game fully supports other playstyles. Players can act as a hands-off 'commissioner' to simply observe the simulation unfold, or even experience periods of unemployment due to personal choice or professional setbacks. Your story is defined by your character's journey, not just their job title. Measuring Success: The Legacy Score In Football Sim, success is measured by more than just championships. The ultimate goal is to build a lasting legacy, which is represented by a comprehensive Legacy Score . This score provides a tangible way to measure success and compare the outcomes of different playthroughs, and it's composed of two core components: Professional Legacy: This is a measure of your success in the football world. It includes traditional metrics like wins and losses, championships won, financial management, and the growth of your team's prestige. Personal Legacy: This measures your success as a person. It is influenced by the strength of your relationships with family and friends, your personal wealth, your health, and whether you successfully create a lineage to carry on your name. This dual system allows for multiple paths to victory. A player could become a ruthless, championship-winning tyrant with a broken family life, or a beloved figure who builds a dynasty of both football and family, each resulting in a unique Legacy Score. Life Simulation and Legacy The game extends beyond the stadium. Players will manage their character's personal life, which can include dating, marriage, and raising children. The game features a legacy system: upon the character's death, the player may have the option to continue as an heir who follows in their footsteps, creating a multi-generational saga. Conversely, a character who fails to build relationships may find their story ends with them. A World of Consequences Decisions have cascading effects that ripple through the character's life. The game will feature a dynamic economy and requires players to manage their personal finances. Work-Life Balance: Neglecting personal issues can lead to long-term health problems and stress, eventually impacting job performance. Conversely, focusing too much on personal life can cause professional duties to suffer. Interconnected Choices: Every decision can create a new dilemma, making each playthrough a unique narrative driven by the player's choices. AI-Driven Narrative Engine A core pillar of the game's design is the use of a Large Language Model (LLM) to generate dynamic, contextual, and unique narrative content. This moves beyond static, pre-written events to create a truly emergent story. NPC State System Every non-player character (NPC) in the world maintains a persistent state, tracking their personality, relationships, history, and current situation. This state serves as the context for the LLM, ensuring that all generated content is deeply personal and relevant to that character's life. Emergent Storytelling Instead of generic events, the game will use the LLM to create specific, flavorful narratives. This approach enhances immersion and makes the game world feel alive. Dynamic Event Descriptions: If a player suffers a \"non-football injury,\" the game won't just report the fact. It will query the LLM with the player's state (e.g., personality, recent activities) to generate a plausible and unique cause, such as \"slipped on a wet floor while trying to recreate a viral dance video for his social media.\" Contextual Performance Modifiers: When a player receives a performance boost or penalty, the reason will be dynamically generated. A morale boost might be attributed to \"receiving a heartfelt letter from his hometown Little League team,\" while a slump could be explained by \"an ongoing obsession with a difficult video game, leading to sleepless nights.\" Relationship-Driven Decisions: The history between NPCs will influence their choices. For instance, a star player entering free agency might be heavily swayed to sign with a team where his former college teammate plays, especially if they have maintained a strong, positive relationship over their careers. This creates subtle, realistic narratives that reward attentive players. This system ensures that no two playthroughs are the same and that the stories unfolding around the player are as deep and varied as the football simulation itself. Leagues The game world is structured around a tiered system of football leagues. League Structure The game world is organized into a hierarchy of leagues, each with its own rules and characteristics. Professional vs. Amateur: A league's core identity is defined by how its players are compensated. Professional Leagues: Players are paid employees who receive salaries. Their decisions are heavily influenced by financial incentives, career ambitions, and the desire to win championships. Amateur Leagues: Players are not paid a salary. Instead, they might receive benefits like scholarships. Their motivations are balanced differently, with real-world constraints like geographic location and time commitment playing a larger role in their decisions than for professionals. Prestige: Every league and team has a prestige score, representing their reputation and historical success. High prestige is crucial for attracting top-tier players and staff in both professional and amateur tiers, but especially so in the amateurs. Flexible Size: While a typical league might consist of 8 to 32 teams, the system will be designed to support a flexible number of teams, allowing for diverse game worlds. The Annual Cycle The game calendar revolves around a distinct annual schedule. A typical season cycle proceeds as follows: Offseason --> End-of-Season Awards --> Staff Changes --> New Player Generation (Draft) --> Free Agency & Contract Negotiations --> Player Retirements --> Training Camp --> Preseason --> Season --> Playoffs --> Offseason The Weekly Cycle (In-Season) While the annual cycle dictates the world's high-level progression, the in-season period is structured around a weekly, turn-based loop. This provides the cadence for team management, game events, and the personal-life decisions the player may face. Start of Week (Post-Game) --> Media Interactions & Fallout --> Personal Life Decisions --> Roster & Depth Chart Adjustments --> Weekly Training & Practice --> Mid-Week Events & Decisions --> Pre-Game Preparation & Strategy --> Next Game Gameplay Pacing and Player Agency A key design goal is to allow a single season to be simulated in approximately 20 minutes for players who wish to advance quickly, ensuring a fast and fluid experience for those who prefer it. However, the game is designed to be enjoyed at a slower pace. Player agency is deep, covering team management tasks like designing playbooks, setting ticket prices, and running marketing campaigns. This agency also extends to the character's personal life. Players will face numerous non-football decisions that shape their story. Just like their professional duties, these choices can be addressed with minimal thought to advance the timeline, or they can be approached tactically, requiring careful consideration of their cascading consequences.","title":"Vision"},{"location":"project/vision/#vision","text":"This document outlines the core vision for Football Sim, a game that blends deep football management with personal role-playing.","title":"Vision"},{"location":"project/vision/#the-playable-character","text":"The player experience is centered around the life and career of a professional in the world of American football.","title":"The Playable Character"},{"location":"project/vision/#core-role-a-career-in-football","text":"The player's experience is centered on a character navigating a career within the world of American football. While the primary gameplay focuses on management roles like a General Manager or Team Owner, the game fully supports other playstyles. Players can act as a hands-off 'commissioner' to simply observe the simulation unfold, or even experience periods of unemployment due to personal choice or professional setbacks. Your story is defined by your character's journey, not just their job title.","title":"Core Role: A Career in Football"},{"location":"project/vision/#measuring-success-the-legacy-score","text":"In Football Sim, success is measured by more than just championships. The ultimate goal is to build a lasting legacy, which is represented by a comprehensive Legacy Score . This score provides a tangible way to measure success and compare the outcomes of different playthroughs, and it's composed of two core components: Professional Legacy: This is a measure of your success in the football world. It includes traditional metrics like wins and losses, championships won, financial management, and the growth of your team's prestige. Personal Legacy: This measures your success as a person. It is influenced by the strength of your relationships with family and friends, your personal wealth, your health, and whether you successfully create a lineage to carry on your name. This dual system allows for multiple paths to victory. A player could become a ruthless, championship-winning tyrant with a broken family life, or a beloved figure who builds a dynasty of both football and family, each resulting in a unique Legacy Score.","title":"Measuring Success: The Legacy Score"},{"location":"project/vision/#life-simulation-and-legacy","text":"The game extends beyond the stadium. Players will manage their character's personal life, which can include dating, marriage, and raising children. The game features a legacy system: upon the character's death, the player may have the option to continue as an heir who follows in their footsteps, creating a multi-generational saga. Conversely, a character who fails to build relationships may find their story ends with them.","title":"Life Simulation and Legacy"},{"location":"project/vision/#a-world-of-consequences","text":"Decisions have cascading effects that ripple through the character's life. The game will feature a dynamic economy and requires players to manage their personal finances. Work-Life Balance: Neglecting personal issues can lead to long-term health problems and stress, eventually impacting job performance. Conversely, focusing too much on personal life can cause professional duties to suffer. Interconnected Choices: Every decision can create a new dilemma, making each playthrough a unique narrative driven by the player's choices.","title":"A World of Consequences"},{"location":"project/vision/#ai-driven-narrative-engine","text":"A core pillar of the game's design is the use of a Large Language Model (LLM) to generate dynamic, contextual, and unique narrative content. This moves beyond static, pre-written events to create a truly emergent story.","title":"AI-Driven Narrative Engine"},{"location":"project/vision/#npc-state-system","text":"Every non-player character (NPC) in the world maintains a persistent state, tracking their personality, relationships, history, and current situation. This state serves as the context for the LLM, ensuring that all generated content is deeply personal and relevant to that character's life.","title":"NPC State System"},{"location":"project/vision/#emergent-storytelling","text":"Instead of generic events, the game will use the LLM to create specific, flavorful narratives. This approach enhances immersion and makes the game world feel alive. Dynamic Event Descriptions: If a player suffers a \"non-football injury,\" the game won't just report the fact. It will query the LLM with the player's state (e.g., personality, recent activities) to generate a plausible and unique cause, such as \"slipped on a wet floor while trying to recreate a viral dance video for his social media.\" Contextual Performance Modifiers: When a player receives a performance boost or penalty, the reason will be dynamically generated. A morale boost might be attributed to \"receiving a heartfelt letter from his hometown Little League team,\" while a slump could be explained by \"an ongoing obsession with a difficult video game, leading to sleepless nights.\" Relationship-Driven Decisions: The history between NPCs will influence their choices. For instance, a star player entering free agency might be heavily swayed to sign with a team where his former college teammate plays, especially if they have maintained a strong, positive relationship over their careers. This creates subtle, realistic narratives that reward attentive players. This system ensures that no two playthroughs are the same and that the stories unfolding around the player are as deep and varied as the football simulation itself.","title":"Emergent Storytelling"},{"location":"project/vision/#leagues","text":"The game world is structured around a tiered system of football leagues.","title":"Leagues"},{"location":"project/vision/#league-structure","text":"The game world is organized into a hierarchy of leagues, each with its own rules and characteristics. Professional vs. Amateur: A league's core identity is defined by how its players are compensated. Professional Leagues: Players are paid employees who receive salaries. Their decisions are heavily influenced by financial incentives, career ambitions, and the desire to win championships. Amateur Leagues: Players are not paid a salary. Instead, they might receive benefits like scholarships. Their motivations are balanced differently, with real-world constraints like geographic location and time commitment playing a larger role in their decisions than for professionals. Prestige: Every league and team has a prestige score, representing their reputation and historical success. High prestige is crucial for attracting top-tier players and staff in both professional and amateur tiers, but especially so in the amateurs. Flexible Size: While a typical league might consist of 8 to 32 teams, the system will be designed to support a flexible number of teams, allowing for diverse game worlds.","title":"League Structure"},{"location":"project/vision/#the-annual-cycle","text":"The game calendar revolves around a distinct annual schedule. A typical season cycle proceeds as follows: Offseason --> End-of-Season Awards --> Staff Changes --> New Player Generation (Draft) --> Free Agency & Contract Negotiations --> Player Retirements --> Training Camp --> Preseason --> Season --> Playoffs --> Offseason","title":"The Annual Cycle"},{"location":"project/vision/#the-weekly-cycle-in-season","text":"While the annual cycle dictates the world's high-level progression, the in-season period is structured around a weekly, turn-based loop. This provides the cadence for team management, game events, and the personal-life decisions the player may face. Start of Week (Post-Game) --> Media Interactions & Fallout --> Personal Life Decisions --> Roster & Depth Chart Adjustments --> Weekly Training & Practice --> Mid-Week Events & Decisions --> Pre-Game Preparation & Strategy --> Next Game","title":"The Weekly Cycle (In-Season)"},{"location":"project/vision/#gameplay-pacing-and-player-agency","text":"A key design goal is to allow a single season to be simulated in approximately 20 minutes for players who wish to advance quickly, ensuring a fast and fluid experience for those who prefer it. However, the game is designed to be enjoyed at a slower pace. Player agency is deep, covering team management tasks like designing playbooks, setting ticket prices, and running marketing campaigns. This agency also extends to the character's personal life. Players will face numerous non-football decisions that shape their story. Just like their professional duties, these choices can be addressed with minimal thought to advance the timeline, or they can be approached tactically, requiring careful consideration of their cascading consequences.","title":"Gameplay Pacing and Player Agency"},{"location":"project/milestones/milestone_1/","text":"Milestone 1: Foundational Scaffolding Implementation Checklist [ ] Set up development environment (Python, PHP, Postgres). [ ] Create the game database in Postgres. [ ] Write and execute a single SQL script to create all tables. [ ] Develop a basic test harness/script to connect to the database. [ ] Implement and verify CRUD operations for key tables ( world , country , user ). 1. Goal To establish the project's core infrastructure, including the physical database and a basic developer interface for data manipulation and verification. 2. Description This initial phase involves translating the schemas in plan/10_data_models.md into a functioning Postgres database and setting up the core project structure. It's about building the physical foundation upon which all other features will be built. A basic interface (likely a command-line tool or test harness) will be created to perform CRUD (Create, Read, Update, Delete) operations, allowing for initial data setup and ensuring the architecture is sound. 3. Key Systems & Data Models All Data Models from plan/10_data_models.md : The primary task is to implement the entire defined schema in a single database. Postgres Database: The server-based database that will store all game data, including user authentication and game world simulation data. Developer Test Harness (Python/PHP): A simple script to verify database connectivity and schema correctness. 4. Implementation Plan Environment Setup [ ] Install Python and the psycopg2 library. [ ] Install PHP and the Postgres driver. [ ] Install and configure a local Postgres server instance. Database Creation [ ] Create the main database and a user role with appropriate permissions in Postgres. Schema Implementation [x] Create a single SQL script ( schema.sql ) containing all CREATE TABLE statements from 10_data_models.md . [ ] Execute schema.sql against the Postgres database. Verification [ ] Develop a simple script (e.g., db_test.py ) that connects to the database. [ ] Implement test functions in the script to perform CRUD operations on the world table and the user table. [ ] Run the tests to confirm success. 5. Acceptance Criteria (Definition of Done) A Postgres database is created and accessible from the development environment. All tables from plan/10_data_models.md exist in the database as specified. A developer script can successfully connect to the database. The script can create, read, update, and delete a record from the world table and the user table without errors. 6. Considerations & Notes The primary focus is data integrity. Ensure all foreign key constraints, unique constraints, and default values are implemented correctly as defined in the data model document. The developer test harness does not need a user interface; it is purely for backend verification.","title":"Milestone 1: Foundational Scaffolding"},{"location":"project/milestones/milestone_1/#milestone-1-foundational-scaffolding","text":"","title":"Milestone 1: Foundational Scaffolding"},{"location":"project/milestones/milestone_1/#implementation-checklist","text":"[ ] Set up development environment (Python, PHP, Postgres). [ ] Create the game database in Postgres. [ ] Write and execute a single SQL script to create all tables. [ ] Develop a basic test harness/script to connect to the database. [ ] Implement and verify CRUD operations for key tables ( world , country , user ).","title":"Implementation Checklist"},{"location":"project/milestones/milestone_1/#1-goal","text":"To establish the project's core infrastructure, including the physical database and a basic developer interface for data manipulation and verification.","title":"1. Goal"},{"location":"project/milestones/milestone_1/#2-description","text":"This initial phase involves translating the schemas in plan/10_data_models.md into a functioning Postgres database and setting up the core project structure. It's about building the physical foundation upon which all other features will be built. A basic interface (likely a command-line tool or test harness) will be created to perform CRUD (Create, Read, Update, Delete) operations, allowing for initial data setup and ensuring the architecture is sound.","title":"2. Description"},{"location":"project/milestones/milestone_1/#3-key-systems-data-models","text":"All Data Models from plan/10_data_models.md : The primary task is to implement the entire defined schema in a single database. Postgres Database: The server-based database that will store all game data, including user authentication and game world simulation data. Developer Test Harness (Python/PHP): A simple script to verify database connectivity and schema correctness.","title":"3. Key Systems &amp; Data Models"},{"location":"project/milestones/milestone_1/#4-implementation-plan","text":"Environment Setup [ ] Install Python and the psycopg2 library. [ ] Install PHP and the Postgres driver. [ ] Install and configure a local Postgres server instance. Database Creation [ ] Create the main database and a user role with appropriate permissions in Postgres. Schema Implementation [x] Create a single SQL script ( schema.sql ) containing all CREATE TABLE statements from 10_data_models.md . [ ] Execute schema.sql against the Postgres database. Verification [ ] Develop a simple script (e.g., db_test.py ) that connects to the database. [ ] Implement test functions in the script to perform CRUD operations on the world table and the user table. [ ] Run the tests to confirm success.","title":"4. Implementation Plan"},{"location":"project/milestones/milestone_1/#5-acceptance-criteria-definition-of-done","text":"A Postgres database is created and accessible from the development environment. All tables from plan/10_data_models.md exist in the database as specified. A developer script can successfully connect to the database. The script can create, read, update, and delete a record from the world table and the user table without errors.","title":"5. Acceptance Criteria (Definition of Done)"},{"location":"project/milestones/milestone_1/#6-considerations-notes","text":"The primary focus is data integrity. Ensure all foreign key constraints, unique constraints, and default values are implemented correctly as defined in the data model document. The developer test harness does not need a user interface; it is purely for backend verification.","title":"6. Considerations &amp; Notes"},{"location":"project/milestones/milestone_2/","text":"","title":"Milestone 2"},{"location":"project/milestones/milestone_3/","text":"","title":"Milestone 3"},{"location":"project/milestones/milestone_4/","text":"","title":"Milestone 4"},{"location":"project/milestones/milestone_5/","text":"","title":"Milestone 5"},{"location":"project/milestones/milestone_6/","text":"","title":"Milestone 6"},{"location":"project/milestones/milestone_7/","text":"","title":"Milestone 7"},{"location":"project/milestones/milestone_template/","text":"Milestone X: [Milestone Title] Implementation Checklist [ ] Task 1: [Description] [ ] Task 2: [Description] [ ] Task 3: [Description] 1. Goal A one-sentence summary of the primary objective for this milestone. 2. Description A detailed paragraph explaining what this milestone entails, its purpose within the project, and how it connects to previous and future milestones. This can be adapted from the roadmap. 3. Key Systems & Data Models A list of the primary architectural components, database tables, or modules that will be created or heavily modified during this milestone. System/Model 1: Justification for its inclusion. System/Model 2: Justification for its inclusion. 4. Implementation Plan A detailed, step-by-step breakdown of the tasks required to complete the milestone. [High-level step 1] [ ] Sub-task 1.1 [ ] Sub-task 1.2 [High-level step 2] [ ] Sub-task 2.1 [ ] Sub-task 2.2 5. Acceptance Criteria (Definition of Done) A clear, testable set of conditions that must be met for this milestone to be considered complete. Condition 1 Condition 2 Condition 3 6. Considerations & Notes A section for any additional thoughts, potential risks, open questions, or design decisions that need to be made.","title":"Milestone X: [Milestone Title]"},{"location":"project/milestones/milestone_template/#milestone-x-milestone-title","text":"","title":"Milestone X: [Milestone Title]"},{"location":"project/milestones/milestone_template/#implementation-checklist","text":"[ ] Task 1: [Description] [ ] Task 2: [Description] [ ] Task 3: [Description]","title":"Implementation Checklist"},{"location":"project/milestones/milestone_template/#1-goal","text":"A one-sentence summary of the primary objective for this milestone.","title":"1. Goal"},{"location":"project/milestones/milestone_template/#2-description","text":"A detailed paragraph explaining what this milestone entails, its purpose within the project, and how it connects to previous and future milestones. This can be adapted from the roadmap.","title":"2. Description"},{"location":"project/milestones/milestone_template/#3-key-systems-data-models","text":"A list of the primary architectural components, database tables, or modules that will be created or heavily modified during this milestone. System/Model 1: Justification for its inclusion. System/Model 2: Justification for its inclusion.","title":"3. Key Systems &amp; Data Models"},{"location":"project/milestones/milestone_template/#4-implementation-plan","text":"A detailed, step-by-step breakdown of the tasks required to complete the milestone. [High-level step 1] [ ] Sub-task 1.1 [ ] Sub-task 1.2 [High-level step 2] [ ] Sub-task 2.1 [ ] Sub-task 2.2","title":"4. Implementation Plan"},{"location":"project/milestones/milestone_template/#5-acceptance-criteria-definition-of-done","text":"A clear, testable set of conditions that must be met for this milestone to be considered complete. Condition 1 Condition 2 Condition 3","title":"5. Acceptance Criteria (Definition of Done)"},{"location":"project/milestones/milestone_template/#6-considerations-notes","text":"A section for any additional thoughts, potential risks, open questions, or design decisions that need to be made.","title":"6. Considerations &amp; Notes"},{"location":"reference/features/","text":"Feature Catalog This document uses a MoSCoW matrix to guide development priorities and describes key game systems in more detail. MoSCoW Prioritization This section uses the MoSCoW method (Must-have, Should-have, Could-have, Won't-have) to prioritize features for the Minimum Viable Product (MVP) and beyond. Must Have (for MVP) These features are non-negotiable for the first playable version. The game is not functional without them. Core Simulation Engine : Ability to simulate a single play, a drive, and a full game, producing text-based logs and box scores. Data-Driven Characters : Individual and Player models with attributes that directly influence simulation outcomes. Simplified League Structure : A single, functional league with a generated schedule and a championship game. Entity Generation : Logic to create new players and teams to populate the world, driven by Archetype and Generation_Config models. Simplified Playbook System : Pre-set plays are used by AI coaches; no user-facing play editor. Basic Developer Interface : A functional, likely command-line, interface to run simulations and browse NPCs. Should Have (Post-MVP Must-Haves) These features are essential for the complete game vision but will be prioritized for development immediately following the MVP. Advanced Playbook System : A user-facing tool to create and edit detailed plays and formations. Detailed Financial Model : Team budgets, player salaries, revenue from tickets and marketing, and operational expenses. World & Economy Foundation : A functioning World model with a cascading economy ( Country , State , City ) to provide context. Basic Financial Reporting : Generation of simple team financial reports. Player Progression & Aging : A system for player attributes to develop and decline over their careers. Core Off-Season Logic : Implementation of key off-season phases like player retirement and new player drafts. LLM-Powered Narrative Engine : Use of an LLM to generate rich narrative content, including game summaries, player news (awards, injuries), dynamic rivalries, media interactions, and RPG-centric events. Character Life-Sim : A system for managing the playable character's personal life, including relationships, health, and stress, with cascading effects on job performance and a direct impact on the character's Personal Legacy Score . Generational Play : Ability to continue the game as the playable character's offspring after death or retirement, a core component of building a multi-generational Legacy Score . Graphical User Interface (GUI) : A full graphical interface for team and league management. Asynchronous Multiplayer : A \"league hosting\" service where multiple users manage teams in the same game world. Advanced Scouting System : Detailed scouting reports, combine data, and discovery of hidden player potential. In-depth Staff Roles : Hiring and managing of coaches, coordinators, and scouts who have their own attributes. Could Have (Desirable Extras) Desirable features that would improve the game but are not a priority for the initial full release. Historical Modes : Ability to start simulations in past eras with historical data. Won't Have (For Now) Features explicitly excluded to prevent scope creep and maintain focus. Real-time 3D Play Visualization : Gameplay will be presented through text and statistics, not a 3D engine like Madden. Synchronous Multiplayer : Multiplayer will not be real-time, head-to-head gameplay. Official Licensing : The game will use fictional players, teams, and leagues. Feature Descriptions This section provides more detailed outlines for major features and game systems. NPC & Character Roles The world will be populated by a variety of Non-Player Characters (NPCs), each with their own attributes, personalities, and roles. All NPCs are built on the base Individual model. Team Personnel Players : The athletes who play in the games. They have detailed physical, mental, and skill-based attributes. Head Coach : Manages the coaching staff and has ultimate authority on game-day strategy. This is a primary role for the playable character. Offensive/Defensive/Special Teams Coordinators : Specialized coaches responsible for their respective phases of the game. Their schemes and play-calling tendencies influence team performance. General Manager : Responsible for player contracts, trades, and drafting. This is a primary role for the playable character. Team Owner : The ultimate authority for the team. Sets budgets, long-term goals, and can hire/fire the GM. This is a primary role for the playable character. Commissioner/Observer : While not a direct management role, the player can choose to act as an uninvolved observer, watching the simulation unfold from a league-wide perspective without being tied to a specific team. Scouts : Evaluate talent from other leagues and in the upcoming draft class. Medical Staff : Manage player injuries and rehabilitation. External World NPCs Agents : Represent players during contract negotiations. Media Personnel : Journalists and reporters who write stories, conduct interviews, and influence public perception. Family Members : Spouses, children, and other relatives who are part of the player character's life-sim narrative.","title":"Feature Catalog"},{"location":"reference/features/#feature-catalog","text":"This document uses a MoSCoW matrix to guide development priorities and describes key game systems in more detail.","title":"Feature Catalog"},{"location":"reference/features/#moscow-prioritization","text":"This section uses the MoSCoW method (Must-have, Should-have, Could-have, Won't-have) to prioritize features for the Minimum Viable Product (MVP) and beyond.","title":"MoSCoW Prioritization"},{"location":"reference/features/#must-have-for-mvp","text":"These features are non-negotiable for the first playable version. The game is not functional without them. Core Simulation Engine : Ability to simulate a single play, a drive, and a full game, producing text-based logs and box scores. Data-Driven Characters : Individual and Player models with attributes that directly influence simulation outcomes. Simplified League Structure : A single, functional league with a generated schedule and a championship game. Entity Generation : Logic to create new players and teams to populate the world, driven by Archetype and Generation_Config models. Simplified Playbook System : Pre-set plays are used by AI coaches; no user-facing play editor. Basic Developer Interface : A functional, likely command-line, interface to run simulations and browse NPCs.","title":"Must Have (for MVP)"},{"location":"reference/features/#should-have-post-mvp-must-haves","text":"These features are essential for the complete game vision but will be prioritized for development immediately following the MVP. Advanced Playbook System : A user-facing tool to create and edit detailed plays and formations. Detailed Financial Model : Team budgets, player salaries, revenue from tickets and marketing, and operational expenses. World & Economy Foundation : A functioning World model with a cascading economy ( Country , State , City ) to provide context. Basic Financial Reporting : Generation of simple team financial reports. Player Progression & Aging : A system for player attributes to develop and decline over their careers. Core Off-Season Logic : Implementation of key off-season phases like player retirement and new player drafts. LLM-Powered Narrative Engine : Use of an LLM to generate rich narrative content, including game summaries, player news (awards, injuries), dynamic rivalries, media interactions, and RPG-centric events. Character Life-Sim : A system for managing the playable character's personal life, including relationships, health, and stress, with cascading effects on job performance and a direct impact on the character's Personal Legacy Score . Generational Play : Ability to continue the game as the playable character's offspring after death or retirement, a core component of building a multi-generational Legacy Score . Graphical User Interface (GUI) : A full graphical interface for team and league management. Asynchronous Multiplayer : A \"league hosting\" service where multiple users manage teams in the same game world. Advanced Scouting System : Detailed scouting reports, combine data, and discovery of hidden player potential. In-depth Staff Roles : Hiring and managing of coaches, coordinators, and scouts who have their own attributes.","title":"Should Have (Post-MVP Must-Haves)"},{"location":"reference/features/#could-have-desirable-extras","text":"Desirable features that would improve the game but are not a priority for the initial full release. Historical Modes : Ability to start simulations in past eras with historical data.","title":"Could Have (Desirable Extras)"},{"location":"reference/features/#wont-have-for-now","text":"Features explicitly excluded to prevent scope creep and maintain focus. Real-time 3D Play Visualization : Gameplay will be presented through text and statistics, not a 3D engine like Madden. Synchronous Multiplayer : Multiplayer will not be real-time, head-to-head gameplay. Official Licensing : The game will use fictional players, teams, and leagues.","title":"Won't Have (For Now)"},{"location":"reference/features/#feature-descriptions","text":"This section provides more detailed outlines for major features and game systems.","title":"Feature Descriptions"},{"location":"reference/features/#npc-character-roles","text":"The world will be populated by a variety of Non-Player Characters (NPCs), each with their own attributes, personalities, and roles. All NPCs are built on the base Individual model.","title":"NPC &amp; Character Roles"},{"location":"reference/features/#team-personnel","text":"Players : The athletes who play in the games. They have detailed physical, mental, and skill-based attributes. Head Coach : Manages the coaching staff and has ultimate authority on game-day strategy. This is a primary role for the playable character. Offensive/Defensive/Special Teams Coordinators : Specialized coaches responsible for their respective phases of the game. Their schemes and play-calling tendencies influence team performance. General Manager : Responsible for player contracts, trades, and drafting. This is a primary role for the playable character. Team Owner : The ultimate authority for the team. Sets budgets, long-term goals, and can hire/fire the GM. This is a primary role for the playable character. Commissioner/Observer : While not a direct management role, the player can choose to act as an uninvolved observer, watching the simulation unfold from a league-wide perspective without being tied to a specific team. Scouts : Evaluate talent from other leagues and in the upcoming draft class. Medical Staff : Manage player injuries and rehabilitation.","title":"Team Personnel"},{"location":"reference/features/#external-world-npcs","text":"Agents : Represent players during contract negotiations. Media Personnel : Journalists and reporters who write stories, conduct interviews, and influence public perception. Family Members : Spouses, children, and other relatives who are part of the player character's life-sim narrative.","title":"External World NPCs"},{"location":"reference/glossary/","text":"Glossary of Terms This document defines key terms and concepts used throughout the project's planning and design documents. It is intended to provide clarity on game-specific mechanics, technical jargon, and potentially ambiguous terms. A Archetype : A template or blueprint used for generating new game entities, primarily players. An archetype, such as \"Pocket Passer QB\" or \"Coverage Safety,\" defines a set of base attributes and skills that the generation system uses to create new, varied individuals. B Box Score : A standardized statistical summary of a single game. It includes individual player statistics (passing, rushing, receiving, etc.) and team-level totals. The player_game_stats table is the source for this data. C Cascading Modifier System : A core architectural principle where attributes for a geographic area are calculated by inheriting and modifying values from parent regions. For example, a city's economic growth is determined by applying its local modifier to its state's effective rate, which in turn is derived from the country's rate and the world's global rate. This creates nuanced regional differences. CRUD : An acronym for C reate, R ead, U pdate, D elete. These are the four basic functions of persistent storage and are used to describe the fundamental operations for managing data in a database. D Depth Chart : A strategic document that arranges players from the team roster into specific positions and ranks (e.g., starter, backup) for a given situation or formation (like 'Shotgun Offense' or 'Nickel Defense'). A team can have multiple depth charts. Managed via the depth_chart and depth_chart_position tables. Down : A single attempt (a play) by the offense to advance the football. The offense gets a series of four downs to gain at least ten yards. If successful, they earn a \"first down\" and a new set of four downs. Drive : A continuous series of offensive plays by one team, starting from when they gain possession of the ball until they score, lose possession via a turnover, or punt the ball to the other team. E Entity : A generic term for any distinct object or record within the game's simulation world. Examples include a player , team , league , individual , or city . Entity Generation : The process of programmatically creating new entities to populate the game world. This is primarily used for generating new players each off-season (the \"draft class\" or \"youth intake\") to ensure the game world continues indefinitely. This system is driven by Archetype and Generation Configuration models. I Individual : The base data model for every person in the game world. It stores universal data like name, birth date, and personality traits. Other models like Player or Staff link to an Individual record to add role-specific attributes. L Legacy Score : The primary measurement of success in the game. It is a comprehensive score that combines a player's Professional Legacy (wins, championships, finances) with their Personal Legacy (relationships, family, health) to provide a holistic evaluation of their career and life. Line of Scrimmage : An imaginary line across the width of the field where the football is placed at the beginning of a play. Neither the offense nor the defense can cross this line until the play begins. M MVP (Minimum Viable Product) : The earliest version of the game that includes just enough features to be usable and functional. The goal is to create a core, playable experience upon which further features can be built. See ../project/mvp.md for specifics. O Off-Season : The period in the game's calendar between the final championship game of one season and the start of the next. It is comprised of several distinct phases, including player retirement, awards, new player drafts, and free agency. P Play Design : The definition of a single, specific football play concept, such as a \"HB Dive\" or \"Slant Pass.\" It is a component of a Playbook . Playbook : A collection of Play Designs that a team's AI coach can choose from during a game. Polymorphic Relationship : A database design where a single table can link to records from multiple other tables. In this project, the relationship table is polymorphic because it can connect an individual to another individual , a team to another team , or an individual to a team , all within the same structure. Prestige : A numerical rating (1-100) assigned to entities like leagues and teams to represent their reputation, historical success, and desirability. High prestige attracts better players and more fan interest. R Relationship Engine : The system, centered on the relationship table, that models the connections between any two entities in the game. It tracks things like friendships, rivalries, family ties, and employment, each with a strength score that can influence entity behavior and narrative events. S Schema : The blueprint or structure of the database. It defines all the tables, the columns within those tables, their data types, and the relationships (foreign keys, constraints) between them. The project's schema is defined in ../technical/data_models.md . Special Teams : A term for the group of players who participate in kicking plays (punts, field goals, kickoffs, and extra points). T Test Harness : A script or collection of software tools used by developers to test a component of the system. For this project, it refers to a simple script used to verify database connectivity and the correctness of CRUD operations. Tick-Based Simulation : The architecture for simulating a single football play. The play unfolds in discrete time intervals called \"ticks\" (e.g., 0.1 seconds). In each tick, every player on the field perceives the environment, decides on an action, and the engine resolves all actions simultaneously. The simulation continues, tick by tick, until a play-ending condition is met. W World : The top-level container for a single, self-contained game save. Each world record in the database represents a unique and isolated simulation universe with its own timeline, teams, players, and history.","title":"Glossary of Terms"},{"location":"reference/glossary/#glossary-of-terms","text":"This document defines key terms and concepts used throughout the project's planning and design documents. It is intended to provide clarity on game-specific mechanics, technical jargon, and potentially ambiguous terms.","title":"Glossary of Terms"},{"location":"reference/glossary/#a","text":"Archetype : A template or blueprint used for generating new game entities, primarily players. An archetype, such as \"Pocket Passer QB\" or \"Coverage Safety,\" defines a set of base attributes and skills that the generation system uses to create new, varied individuals.","title":"A"},{"location":"reference/glossary/#b","text":"Box Score : A standardized statistical summary of a single game. It includes individual player statistics (passing, rushing, receiving, etc.) and team-level totals. The player_game_stats table is the source for this data.","title":"B"},{"location":"reference/glossary/#c","text":"Cascading Modifier System : A core architectural principle where attributes for a geographic area are calculated by inheriting and modifying values from parent regions. For example, a city's economic growth is determined by applying its local modifier to its state's effective rate, which in turn is derived from the country's rate and the world's global rate. This creates nuanced regional differences. CRUD : An acronym for C reate, R ead, U pdate, D elete. These are the four basic functions of persistent storage and are used to describe the fundamental operations for managing data in a database.","title":"C"},{"location":"reference/glossary/#d","text":"Depth Chart : A strategic document that arranges players from the team roster into specific positions and ranks (e.g., starter, backup) for a given situation or formation (like 'Shotgun Offense' or 'Nickel Defense'). A team can have multiple depth charts. Managed via the depth_chart and depth_chart_position tables. Down : A single attempt (a play) by the offense to advance the football. The offense gets a series of four downs to gain at least ten yards. If successful, they earn a \"first down\" and a new set of four downs. Drive : A continuous series of offensive plays by one team, starting from when they gain possession of the ball until they score, lose possession via a turnover, or punt the ball to the other team.","title":"D"},{"location":"reference/glossary/#e","text":"Entity : A generic term for any distinct object or record within the game's simulation world. Examples include a player , team , league , individual , or city . Entity Generation : The process of programmatically creating new entities to populate the game world. This is primarily used for generating new players each off-season (the \"draft class\" or \"youth intake\") to ensure the game world continues indefinitely. This system is driven by Archetype and Generation Configuration models.","title":"E"},{"location":"reference/glossary/#i","text":"Individual : The base data model for every person in the game world. It stores universal data like name, birth date, and personality traits. Other models like Player or Staff link to an Individual record to add role-specific attributes.","title":"I"},{"location":"reference/glossary/#l","text":"Legacy Score : The primary measurement of success in the game. It is a comprehensive score that combines a player's Professional Legacy (wins, championships, finances) with their Personal Legacy (relationships, family, health) to provide a holistic evaluation of their career and life. Line of Scrimmage : An imaginary line across the width of the field where the football is placed at the beginning of a play. Neither the offense nor the defense can cross this line until the play begins.","title":"L"},{"location":"reference/glossary/#m","text":"MVP (Minimum Viable Product) : The earliest version of the game that includes just enough features to be usable and functional. The goal is to create a core, playable experience upon which further features can be built. See ../project/mvp.md for specifics.","title":"M"},{"location":"reference/glossary/#o","text":"Off-Season : The period in the game's calendar between the final championship game of one season and the start of the next. It is comprised of several distinct phases, including player retirement, awards, new player drafts, and free agency.","title":"O"},{"location":"reference/glossary/#p","text":"Play Design : The definition of a single, specific football play concept, such as a \"HB Dive\" or \"Slant Pass.\" It is a component of a Playbook . Playbook : A collection of Play Designs that a team's AI coach can choose from during a game. Polymorphic Relationship : A database design where a single table can link to records from multiple other tables. In this project, the relationship table is polymorphic because it can connect an individual to another individual , a team to another team , or an individual to a team , all within the same structure. Prestige : A numerical rating (1-100) assigned to entities like leagues and teams to represent their reputation, historical success, and desirability. High prestige attracts better players and more fan interest.","title":"P"},{"location":"reference/glossary/#r","text":"Relationship Engine : The system, centered on the relationship table, that models the connections between any two entities in the game. It tracks things like friendships, rivalries, family ties, and employment, each with a strength score that can influence entity behavior and narrative events.","title":"R"},{"location":"reference/glossary/#s","text":"Schema : The blueprint or structure of the database. It defines all the tables, the columns within those tables, their data types, and the relationships (foreign keys, constraints) between them. The project's schema is defined in ../technical/data_models.md . Special Teams : A term for the group of players who participate in kicking plays (punts, field goals, kickoffs, and extra points).","title":"S"},{"location":"reference/glossary/#t","text":"Test Harness : A script or collection of software tools used by developers to test a component of the system. For this project, it refers to a simple script used to verify database connectivity and the correctness of CRUD operations. Tick-Based Simulation : The architecture for simulating a single football play. The play unfolds in discrete time intervals called \"ticks\" (e.g., 0.1 seconds). In each tick, every player on the field perceives the environment, decides on an action, and the engine resolves all actions simultaneously. The simulation continues, tick by tick, until a play-ending condition is met.","title":"T"},{"location":"reference/glossary/#w","text":"World : The top-level container for a single, self-contained game save. Each world record in the database represents a unique and isolated simulation universe with its own timeline, teams, players, and history.","title":"W"},{"location":"reference/planning_notes/","text":"Role-Playing & Narrative Integration:Character System: What specific events will the LLM generate? How will you prompt the LLM to generate relevant and consistent narratives? How will LLM-generated content tie into game mechanics? Multi-League & Tiered System: Determine leauge parameters Design the rules for each league type (pro, college, international, arena). How will promotions/relegations work? How will player movement between leagues be handled? Season Schedule - Schedule that a league will follow. This doesn't contain inividual game dates but the foramt a league will follow. Simulation Configuration - (tick rate, randomness factors, etc.) I suppose this would go in the world table. User instuction log - \u2022 Idea: The MVP lets the user give limited instructions that ultimately let the simulation engine decide the play outcome. Keeping a history of these instructions might be useful for reporting or debugging. \u2022 Change: Add a small table (e.g., coach_instruction_log) that records the team_id, game_id, quarter, play_number, and the instruction/decision made. This is optional for MVP but may be valuable to demonstrate player\u2013coach interaction. Coach play calling proclivity play_calling_skill risk_tolerance preferred_style Play calling notes during the game that an llm coach can reference. Play-by-Play Commentary Templates","title":"Planning notes"},{"location":"reference/research_notes/","text":"","title":"Research notes"},{"location":"technical/architecture/","text":"Architecture Overview This document outlines the high-level architecture of the football simulation game, derived from the defined data models. The design is modular, data-centric, and built to support emergent complexity through interconnected systems. Core Design Principles World as a Sandbox : The world table is the root container for every simulation instance. This design ensures that each game save is a completely isolated and self-contained universe. Composition Over Inheritance : Character and entity design avoids rigid class hierarchies. A base individual table holds universal traits (name, personality), while specialized roles ( player , coach, etc.) are defined in separate tables that link back via a one-to-one relationship. This provides maximum flexibility for creating diverse character types. Generic Relationship Engine : A single, polymorphic relationship table is used to model the connections between any two entities. By storing the type and ID of each entity, it can manage everything from individual friendships and rivalries to a team's rivalry with another team, creating a rich web of interactions. Cascading Modifier System : The game world's characteristics are determined by a hierarchical system of modifiers. Values at a lower geographic level (e.g., a City ) are calculated by combining its own modifiers with the effective values of its parent ( State , Country ). This applies to economics ( growth_rate , wealth_modifier ), culture ( football_interest_modifier ), and more, creating nuanced regional differences. System Architecture Breakdown Geography & Economy The world is defined by a World -> Country -> State -> City hierarchy. The state level is optional to accommodate different national structures. This hierarchy is the foundation for the Cascading Modifier System , which dynamically calculates local attributes for: - Economy : global_growth_rate , wealth_level , cost_of_living_modifier . - Culture : football_interest_modifier . - Environment : avg_temperature . This model ensures that a city's economic and cultural landscape is a logical result of its state, country, and global context. Leagues & Competitions The league model is designed for high configurability: - Structure : Leagues can be customized with optional conferences and divisions . - Scope : A league can operate within a single country or span multiple nations via the league_country link table. - Rules Engine : A flexible league_membership_rule table allows for defining specific requirements for teams to join (e.g., financial stability, geographic location). - Competition : Standardized playoff_format records allow for different kinds of postseason structures. Teams & Organizations The team is the central operational entity for the user. - Identity : Defined by branding (name, colors, logo) and its home city_id , which anchors it geographically and ties it into the cascading modifier system. - Affiliation : A team can exist independently or belong to one or more leagues via the team_league table, including assignments to specific divisions/conferences. - Personnel : A team's roster will be composed of player entities. Leadership roles (owner, coach) link to the staff table, which in turn connects to an individual record, allowing access to their specific attributes and personality traits. People & Roles This system is built on the principle of Composition Over Inheritance . - Individual : The foundational model for every person. It stores universal data: identity ( first_name , last_name ), origin ( home_city_id ), and a suite of personality ratings ( desire_to_win , greed , loyalty ) that will drive the AI for decision-making and narrative events. - Player : A specialized role linked to an individual . This table stores all data relevant to on-field performance: physical and mental athletic ratings, status, and links to their career statistics via the player_stats_history table. Simulation Engine Architecture This section outlines the conceptual model for simulating a single play. The design is a discrete, tick-based system where player actions are resolved in small time increments. 1. The Field Model A virtual representation of the football field is required. It will be a 2D coordinate grid. - Dimensions : 120 yards long (including two 10-yard endzones) by 53 1/3 yards wide. - Coordinates : A coordinate system (e.g., x, y ) will track the precise location of every player and the ball. The x axis represents the length of the field (yard lines), and the y axis represents the width (from sideline to sideline). - Game State Context : The field model also includes critical game state information, such as the line of scrimmage, the first down marker, and hash mark location of the ball. 2. Single Play Simulation Lifecycle Simulating one offensive play can be broken down into three phases: Setup, Execution Loop, and Resolution. Phase I: Pre-Play Setup Before the simulation loop begins, the initial state is established. 1. Define Initial Conditions : The current down, distance, and ball position (yard line) are loaded from the game state. 2. Player Placement : The 22 players on the field are placed at specific starting (x, y) coordinates based on the offensive and defensive play formations that were selected. 3. Assign Roles : Each player is given an initial assignment based on the play call. For example: - Offense : A QB has an assignment to \"pass to WR1\", a lineman to \"block DE\", a running back to \"run to the 3-hole\". - Defense : A cornerback has an assignment to \"cover WR1\", a linebacker to \"blitz the A-gap\". Phase II: The Execution Loop (Tick-Based Simulation) The play unfolds as a series of \"ticks,\" which are small, discrete units of time (e.g., 0.1 seconds). The loop continues until a play-ending condition is met. In each tick, every player on the field is processed: Perception & Intention : Each player AI assesses its situation. Where am I? Where is my assignment? Where is the ball? Based on its assignment and the state of the field, the player forms an immediate intention (e.g., \"move towards the ball carrier,\" \"continue my route,\" \"engage the blocker in front of me\"). Action Selection & Resolution : The player's intention is translated into an action. Movement : A target (x, y) coordinate is calculated. The player moves towards it, with the distance covered in that tick determined by attributes like speed and explosiveness . Interaction : If a player's position causes them to interact with another player (e.g., a blocker and a defender), an interaction check is triggered. The outcome is calculated by comparing relevant player ratings (e.g., blocking_power vs. shed_blocks ; breaking_tackles vs. tackling ). The result could be a successful block, a shed block, a broken tackle, etc. State Update : The engine updates the state of the world based on all resolved actions. The ball's position is updated if it has moved, and all players have new coordinates. Check for End Condition : The engine checks if the play is over. Terminating conditions include: Ball carrier is tackled (positional check and tackle status). Ball carrier goes out of bounds (positional check). A touchdown is scored. An incomplete pass occurs. If a condition is met, the loop terminates. Otherwise, the next tick begins. Phase III: Post-Play Resolution Determine Final Result : The engine calculates the final outcome (e.g., 5-yard gain). Update Game State : The down, distance, and ball position are updated for the next play. Record Statistics : Relevant stats (e.g., passing yards, tackles) are recorded for the players involved, which will be aggregated into the player_game_stats table at the conclusion of the game. Entity Generation Architecture To fulfill the roadmap goal of entity generation, the architecture uses a configurable, data-driven system. This avoids hard-coding generation logic and allows for dynamic evolution of the game world. The system is composed of three key data models: Archetypes : These are templates that define a \"type\" of entity. For a player, archetypes could include \"Pocket Passer QB,\" \"Power Running Back,\" or \"Ball-Hawking Safety.\" Each archetype is linked to a set of baseline attributes (e.g., a Pocket Passer has high throwing_accuracy but low speed ). Archetype Attributes : This model stores the specific baseline integer values for every attribute of an archetype. The simulation engine reads these values and applies a randomization factor to create variation among newly generated individuals of the same archetype. Generation Configuration : This model acts as the control layer. It dictates which archetypes are available to be generated within a specific context and how common they are. The context can be defined by: Scope : Configurations can be applied globally ( world ), to a specific league , or to a country , allowing for regional differences in generated talent. Time : Each configuration has a start_year and optional end_year , enabling the types of players generated to evolve as the game progresses through different eras. Frequency : A spawn_weight attribute determines the relative probability of an archetype appearing, making it possible to have rare or common types of players. In practice, the system would use a generation_config to determine that it should generate a 'Pocket Passer QB' for a specific league, then use the archetype and archetype_attribute tables to find the baseline stats (e.g., throwing_accuracy = 85), and finally apply randomization to create a unique player.","title":"Architecture Overview"},{"location":"technical/architecture/#architecture-overview","text":"This document outlines the high-level architecture of the football simulation game, derived from the defined data models. The design is modular, data-centric, and built to support emergent complexity through interconnected systems.","title":"Architecture Overview"},{"location":"technical/architecture/#core-design-principles","text":"World as a Sandbox : The world table is the root container for every simulation instance. This design ensures that each game save is a completely isolated and self-contained universe. Composition Over Inheritance : Character and entity design avoids rigid class hierarchies. A base individual table holds universal traits (name, personality), while specialized roles ( player , coach, etc.) are defined in separate tables that link back via a one-to-one relationship. This provides maximum flexibility for creating diverse character types. Generic Relationship Engine : A single, polymorphic relationship table is used to model the connections between any two entities. By storing the type and ID of each entity, it can manage everything from individual friendships and rivalries to a team's rivalry with another team, creating a rich web of interactions. Cascading Modifier System : The game world's characteristics are determined by a hierarchical system of modifiers. Values at a lower geographic level (e.g., a City ) are calculated by combining its own modifiers with the effective values of its parent ( State , Country ). This applies to economics ( growth_rate , wealth_modifier ), culture ( football_interest_modifier ), and more, creating nuanced regional differences.","title":"Core Design Principles"},{"location":"technical/architecture/#system-architecture-breakdown","text":"","title":"System Architecture Breakdown"},{"location":"technical/architecture/#geography-economy","text":"The world is defined by a World -> Country -> State -> City hierarchy. The state level is optional to accommodate different national structures. This hierarchy is the foundation for the Cascading Modifier System , which dynamically calculates local attributes for: - Economy : global_growth_rate , wealth_level , cost_of_living_modifier . - Culture : football_interest_modifier . - Environment : avg_temperature . This model ensures that a city's economic and cultural landscape is a logical result of its state, country, and global context.","title":"Geography &amp; Economy"},{"location":"technical/architecture/#leagues-competitions","text":"The league model is designed for high configurability: - Structure : Leagues can be customized with optional conferences and divisions . - Scope : A league can operate within a single country or span multiple nations via the league_country link table. - Rules Engine : A flexible league_membership_rule table allows for defining specific requirements for teams to join (e.g., financial stability, geographic location). - Competition : Standardized playoff_format records allow for different kinds of postseason structures.","title":"Leagues &amp; Competitions"},{"location":"technical/architecture/#teams-organizations","text":"The team is the central operational entity for the user. - Identity : Defined by branding (name, colors, logo) and its home city_id , which anchors it geographically and ties it into the cascading modifier system. - Affiliation : A team can exist independently or belong to one or more leagues via the team_league table, including assignments to specific divisions/conferences. - Personnel : A team's roster will be composed of player entities. Leadership roles (owner, coach) link to the staff table, which in turn connects to an individual record, allowing access to their specific attributes and personality traits.","title":"Teams &amp; Organizations"},{"location":"technical/architecture/#people-roles","text":"This system is built on the principle of Composition Over Inheritance . - Individual : The foundational model for every person. It stores universal data: identity ( first_name , last_name ), origin ( home_city_id ), and a suite of personality ratings ( desire_to_win , greed , loyalty ) that will drive the AI for decision-making and narrative events. - Player : A specialized role linked to an individual . This table stores all data relevant to on-field performance: physical and mental athletic ratings, status, and links to their career statistics via the player_stats_history table.","title":"People &amp; Roles"},{"location":"technical/architecture/#simulation-engine-architecture","text":"This section outlines the conceptual model for simulating a single play. The design is a discrete, tick-based system where player actions are resolved in small time increments.","title":"Simulation Engine Architecture"},{"location":"technical/architecture/#1-the-field-model","text":"A virtual representation of the football field is required. It will be a 2D coordinate grid. - Dimensions : 120 yards long (including two 10-yard endzones) by 53 1/3 yards wide. - Coordinates : A coordinate system (e.g., x, y ) will track the precise location of every player and the ball. The x axis represents the length of the field (yard lines), and the y axis represents the width (from sideline to sideline). - Game State Context : The field model also includes critical game state information, such as the line of scrimmage, the first down marker, and hash mark location of the ball.","title":"1. The Field Model"},{"location":"technical/architecture/#2-single-play-simulation-lifecycle","text":"Simulating one offensive play can be broken down into three phases: Setup, Execution Loop, and Resolution.","title":"2. Single Play Simulation Lifecycle"},{"location":"technical/architecture/#phase-i-pre-play-setup","text":"Before the simulation loop begins, the initial state is established. 1. Define Initial Conditions : The current down, distance, and ball position (yard line) are loaded from the game state. 2. Player Placement : The 22 players on the field are placed at specific starting (x, y) coordinates based on the offensive and defensive play formations that were selected. 3. Assign Roles : Each player is given an initial assignment based on the play call. For example: - Offense : A QB has an assignment to \"pass to WR1\", a lineman to \"block DE\", a running back to \"run to the 3-hole\". - Defense : A cornerback has an assignment to \"cover WR1\", a linebacker to \"blitz the A-gap\".","title":"Phase I: Pre-Play Setup"},{"location":"technical/architecture/#phase-ii-the-execution-loop-tick-based-simulation","text":"The play unfolds as a series of \"ticks,\" which are small, discrete units of time (e.g., 0.1 seconds). The loop continues until a play-ending condition is met. In each tick, every player on the field is processed: Perception & Intention : Each player AI assesses its situation. Where am I? Where is my assignment? Where is the ball? Based on its assignment and the state of the field, the player forms an immediate intention (e.g., \"move towards the ball carrier,\" \"continue my route,\" \"engage the blocker in front of me\"). Action Selection & Resolution : The player's intention is translated into an action. Movement : A target (x, y) coordinate is calculated. The player moves towards it, with the distance covered in that tick determined by attributes like speed and explosiveness . Interaction : If a player's position causes them to interact with another player (e.g., a blocker and a defender), an interaction check is triggered. The outcome is calculated by comparing relevant player ratings (e.g., blocking_power vs. shed_blocks ; breaking_tackles vs. tackling ). The result could be a successful block, a shed block, a broken tackle, etc. State Update : The engine updates the state of the world based on all resolved actions. The ball's position is updated if it has moved, and all players have new coordinates. Check for End Condition : The engine checks if the play is over. Terminating conditions include: Ball carrier is tackled (positional check and tackle status). Ball carrier goes out of bounds (positional check). A touchdown is scored. An incomplete pass occurs. If a condition is met, the loop terminates. Otherwise, the next tick begins.","title":"Phase II: The Execution Loop (Tick-Based Simulation)"},{"location":"technical/architecture/#phase-iii-post-play-resolution","text":"Determine Final Result : The engine calculates the final outcome (e.g., 5-yard gain). Update Game State : The down, distance, and ball position are updated for the next play. Record Statistics : Relevant stats (e.g., passing yards, tackles) are recorded for the players involved, which will be aggregated into the player_game_stats table at the conclusion of the game.","title":"Phase III: Post-Play Resolution"},{"location":"technical/architecture/#entity-generation-architecture","text":"To fulfill the roadmap goal of entity generation, the architecture uses a configurable, data-driven system. This avoids hard-coding generation logic and allows for dynamic evolution of the game world. The system is composed of three key data models: Archetypes : These are templates that define a \"type\" of entity. For a player, archetypes could include \"Pocket Passer QB,\" \"Power Running Back,\" or \"Ball-Hawking Safety.\" Each archetype is linked to a set of baseline attributes (e.g., a Pocket Passer has high throwing_accuracy but low speed ). Archetype Attributes : This model stores the specific baseline integer values for every attribute of an archetype. The simulation engine reads these values and applies a randomization factor to create variation among newly generated individuals of the same archetype. Generation Configuration : This model acts as the control layer. It dictates which archetypes are available to be generated within a specific context and how common they are. The context can be defined by: Scope : Configurations can be applied globally ( world ), to a specific league , or to a country , allowing for regional differences in generated talent. Time : Each configuration has a start_year and optional end_year , enabling the types of players generated to evolve as the game progresses through different eras. Frequency : A spawn_weight attribute determines the relative probability of an archetype appearing, making it possible to have rare or common types of players. In practice, the system would use a generation_config to determine that it should generate a 'Pocket Passer QB' for a specific league, then use the archetype and archetype_attribute tables to find the baseline stats (e.g., throwing_accuracy = 85), and finally apply randomization to create a unique player.","title":"Entity Generation Architecture"},{"location":"technical/data_models/","text":"Football Simulation Game - Data Models Table of Contents Core World & System Models World Model Relationship Model User & Access Control Models User Model Role Model User World Role Model Geographic Models Country Model State Model City Model League & Competition Models League Model League Standings Model Team & Organization Models Team Model Playbook Model Play Design Model Stadium Model Entity Generation Models Archetype Model Generation Configuration Model People & Character Models Individual Model Player Position Model Player Model Personnel, Contracts & Staff Models Player Contract Model Player Contract Year Model Staff Role Type Model Staff Model Financial Advisor Attributes Model Legal Advisor Attributes Model Personal Wellness Attributes Model Game & Simulation Models Game Model Game State Model Game Plan Model Play Model Player Game Stats Model Core World & System Models These models define the foundational elements of the simulation universe. All data resides in a single Postgres database. World Model The World table represents a single game universe/save file. There is only one world record per game instance, serving as the root container for all game data and global settings. CREATE TABLE world ( id INTEGER PRIMARY KEY, name VARCHAR(100) NOT NULL, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, last_played_date TIMESTAMPTZ, current_season INTEGER NOT NULL DEFAULT 1, current_week INTEGER NOT NULL DEFAULT 1, start_year INTEGER NOT NULL, global_growth_rate DECIMAL(4,3) NOT NULL DEFAULT 1.000, sim_speed_factor DECIMAL(3,2) NOT NULL DEFAULT 1.00, randomness_factor DECIMAL(3,2) NOT NULL DEFAULT 1.00 ); (Note: I have updated DATETIME to TIMESTAMPTZ for better timezone handling in Postgres, reflecting the user.preferred_timezone field) Constraint/Relationship notes Primary Key : id - Single record per game instance Global Growth Rate : Base economic growth rate applied worldwide (1.000 = no growth, 1.020 = 2% growth) Simulation Settings : sim_speed_factor : Multiplier for adjusting simulation speed (e.g., for UI). randomness_factor : A global modifier for random events in the simulation. Economy Modifiers : Will be stored in separate world_economy_modifiers table to allow flexible configuration Global Settings : Additional game-wide settings will be stored in separate world_settings table for extensibility Relationship Model The Relationship table is a generic, polymorphic model designed to track the strength and type of connection between any two entities in the game. This can represent person-to-person friendships, team rivalries, player-to-team loyalty, etc. CREATE TABLE relationship ( entity1_id INTEGER NOT NULL, entity1_type VARCHAR(50) NOT NULL, entity2_id INTEGER NOT NULL, entity2_type VARCHAR(50) NOT NULL, relationship_type VARCHAR(50) NOT NULL, strength INTEGER NOT NULL DEFAULT 0, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (entity1_id, entity1_type, entity2_id, entity2_type, relationship_type) ); Constraint/Relationship notes Composite Primary Key : Ensures a unique relationship type between any two specific entities. Polymorphic Design : entity1_id / entity2_id : The ID of the entity. entity1_type / entity2_type : The name of the table the ID belongs to (e.g., 'individual', 'team', 'league'). Relationship Type : A descriptor for the relationship (e.g., 'friendship', 'rivalry', 'familial_sibling', 'employment'). Strength : A numeric counter representing the quality of the relationship. Can be positive or negative (e.g., -100 to 100). Direction : For non-symmetrical relationships (like 'employment'), entity1 can be considered the source/subject and entity2 the target/object. For symmetrical relationships ('friendship'), the order is not significant, and applications should check for both permutations if necessary. User & Access Control Models These models contain all tables related to the application users and their permissions. User Model The User table stores basic information and preferences for players of the game. CREATE TABLE \"user\" ( id INTEGER PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, email VARCHAR(255) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, display_name VARCHAR(100), created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, last_login_date TIMESTAMPTZ, is_active BOOLEAN NOT NULL DEFAULT TRUE, preferred_timezone VARCHAR(50) DEFAULT 'UTC' ); (Note: user is a reserved keyword in SQL, so it's quoted as \"user\" for safety. DATETIME changed to TIMESTAMPTZ.) Constraint/Relationship notes Primary Key : id - Unique identifier for each user Unique Constraints : username and email must be unique across all users Authentication : Password stored as hash for security Display Name : Optional friendly name for UI display Activity Tracking : Last login and active status for user management Timezone : User's preferred timezone for date/time display Future Expansion : Additional user preferences and settings will be stored in separate user_preferences table Game Characters : User's in-game characters/personas will be stored in separate character table linking to this user Role Model The Role table defines a standardized list of permission levels a user can have within a game world. CREATE TABLE role ( id INTEGER PRIMARY KEY, name VARCHAR(50) NOT NULL UNIQUE, description TEXT ); Constraint/Relationship notes Primary Key : id - Unique identifier for the role. name : The machine-friendly name of the role (e.g., 'commissioner', 'owner', 'observer'). description : A user-friendly explanation of what the role entails. User World Role Model This table links a user to a world and assigns them a specific role , creating a proper relationship. This is crucial for managing permissions, such as who can advance the simulation clock or edit league parameters. CREATE TABLE user_world_role ( user_id INTEGER NOT NULL, world_id INTEGER NOT NULL, role_id INTEGER NOT NULL, character_individual_id INTEGER, PRIMARY KEY (user_id, world_id), FOREIGN KEY (user_id) REFERENCES \"user\"(id) ON DELETE CASCADE, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE, FOREIGN KEY (role_id) REFERENCES role(id), FOREIGN KEY (character_individual_id) REFERENCES individual(id) ON DELETE SET NULL ); Constraint/Relationship notes Composite Primary Key : Ensures a user has only one primary role per world. Foreign Keys : Links the user account, game world, and the user's specific role for that world. character_individual_id : If the user has a playable character in this world (like an owner or GM), this links to their corresponding record in the individual table. Geographic Models Country Model The Country table represents different nations in the game world. Each country has economic, climate, and cultural characteristics that affect gameplay within that region. CREATE TABLE country ( id INTEGER PRIMARY KEY, world_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL UNIQUE, code VARCHAR(3) NOT NULL UNIQUE, wealth_level DECIMAL(5,2) NOT NULL DEFAULT 1.00, avg_temperature INTEGER NOT NULL, football_interest_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, economic_stability DECIMAL(3,2) NOT NULL DEFAULT 1.00, population INTEGER, currency_code VARCHAR(3) NOT NULL DEFAULT 'USD', growth_rate DECIMAL(4,3) NOT NULL DEFAULT 1.000, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE ); Constraint/Relationship notes Primary Key : id - Unique identifier for each country Foreign Key : world_id - Links to the world this country exists in Unique Constraints : name and code must be unique within a world Wealth Level : Multiplier affecting economic activities (1.00 = baseline, >1.00 = wealthier, <1.00 = poorer) Temperature : Average temperature in Fahrenheit, affects player preferences and costs Football Interest : Modifier for how popular football is in this country (affects attendance, media coverage, etc.) Economic Stability : Affects contract negotiations, sponsorship deals, and market volatility Population : Total population, affects potential fan base and player pool Currency : Local currency code for economic calculations Growth Rate : Annual economic growth rate modifier, which combines with the world.global_growth_rate . Growth Rate Calculation : The effective growth rate for a country is calculated by combining the world's global growth rate with the country's growth rate modifier (e.g., effective_country_growth = world.global_growth_rate * country.growth_rate ). Additional Modifiers : Country-specific gameplay modifiers will be stored in separate country_modifiers table for flexibility State Model The State table represents states/provinces within countries. Each state has its own economic and cultural characteristics that modify the base country values, creating regional variation within nations. CREATE TABLE state ( id INTEGER PRIMARY KEY, country_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, code VARCHAR(10) NOT NULL, wealth_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, football_interest_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, economic_stability_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, population INTEGER, avg_temperature_modifier INTEGER NOT NULL DEFAULT 0, tax_rate DECIMAL(5,2) NOT NULL DEFAULT 0.00, growth_rate DECIMAL(4,3) NOT NULL DEFAULT 1.000, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (country_id) REFERENCES country(id) ON DELETE CASCADE, UNIQUE(country_id, name), UNIQUE(country_id, code) ); Constraint/Relationship notes Primary Key : id - Unique identifier for each state Foreign Key : country_id - Links to the country this state belongs to Unique Constraints : name and code must be unique within each country Wealth Modifier : Multiplier applied to country's wealth level (1.00 = same as country, >1.00 = wealthier than country average) Football Interest Modifier : Applied to country's football interest (stacks with country modifier) Economic Stability Modifier : Applied to country's economic stability Temperature Modifier : Added/subtracted from country's average temperature (in Fahrenheit) Tax Rate : State-specific tax rate affecting team finances and player salaries Population : State population, affects local market size Growth Rate : Annual economic growth rate modifier, which combines with the effective country growth rate. Growth Rate Calculation : The effective growth rate for a state is calculated by combining the effective country growth rate with the state's growth rate modifier (e.g., effective_state_growth = effective_country_growth * state.growth_rate ). Modifier Inheritance : Team calculations will use: country_value * country_modifier * state_modifier Additional Modifiers : State-specific gameplay modifiers will be stored in separate state_modifiers table for flexibility City Model The City table represents cities within states. Each city has its own economic and cultural characteristics that modify the base state and country values, creating local variation within regions. CREATE TABLE city ( id INTEGER PRIMARY KEY, state_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, wealth_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, football_interest_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, economic_stability_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, population INTEGER NOT NULL, avg_temperature_modifier INTEGER NOT NULL DEFAULT 0, cost_of_living_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, growth_rate DECIMAL(4,3) NOT NULL DEFAULT 1.000, market_size VARCHAR(20) NOT NULL DEFAULT 'medium', created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (state_id) REFERENCES state(id) ON DELETE CASCADE, UNIQUE(state_id, name) ); Constraint/Relationship notes Primary Key : id - Unique identifier for each city Foreign Key : state_id - Links to the state this city belongs to Unique Constraints : name must be unique within each state Wealth Modifier : Multiplier applied to state's wealth level (1.00 = same as state, >1.00 = wealthier than state average) Football Interest Modifier : Applied to state's football interest (stacks with country and state modifiers) Economic Stability Modifier : Applied to state's economic stability Temperature Modifier : Added/subtracted from state's average temperature (in Fahrenheit) Cost of Living : Affects player salary expectations and team operational costs Growth Rate : Annual economic growth rate modifier, which combines with the effective state growth rate. Market Size : Categorical size ('small', 'medium', 'large', 'major') affecting revenue potential Population : City population, affects local fan base and media market Modifier Inheritance : Team calculations will use: country_value * country_modifier * state_modifier * city_modifier Growth Rate Calculation : The effective growth rate for a city is calculated by combining the effective state growth rate with the city's growth rate modifier. This cascading calculation ( world_growth * country_growth * state_growth * city_growth ) determines the local economic evolution. Additional Modifiers : City-specific gameplay modifiers will be stored in separate city_modifiers table for flexibility League & Competition Models League Model The League table represents football leagues that can span multiple countries. Each league has its own rules, structure, and prestige level that affects gameplay. CREATE TABLE league ( id INTEGER PRIMARY KEY, world_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, short_name VARCHAR(20) NOT NULL, prestige_rating INTEGER NOT NULL DEFAULT 50, is_professional BOOLEAN NOT NULL DEFAULT TRUE, salary_cap DECIMAL(12,2), min_teams INTEGER NOT NULL DEFAULT 8, max_teams INTEGER NOT NULL DEFAULT 32, season_length INTEGER NOT NULL DEFAULT 16, playoff_format VARCHAR(50) NOT NULL DEFAULT 'single_elimination', has_conferences BOOLEAN NOT NULL DEFAULT FALSE, has_divisions BOOLEAN NOT NULL DEFAULT FALSE, enforce_geographic_rules BOOLEAN NOT NULL DEFAULT FALSE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, is_active BOOLEAN NOT NULL DEFAULT TRUE, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE ); Supporting Tables League Countries (Many-to-Many) CREATE TABLE league_country ( league_id INTEGER NOT NULL, country_id INTEGER NOT NULL, is_primary_country BOOLEAN NOT NULL DEFAULT FALSE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (league_id, country_id), FOREIGN KEY (league_id) REFERENCES league(id) ON DELETE CASCADE, FOREIGN KEY (country_id) REFERENCES country(id) ON DELETE CASCADE ); League Membership Rules CREATE TABLE league_membership_rule ( id INTEGER PRIMARY KEY, league_id INTEGER NOT NULL, rule_type VARCHAR(50) NOT NULL, rule_value VARCHAR(255) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (league_id) REFERENCES league(id) ON DELETE CASCADE ); League Conferences CREATE TABLE league_conference ( id INTEGER PRIMARY KEY, league_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, short_name VARCHAR(20) NOT NULL, display_order INTEGER NOT NULL DEFAULT 1, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (league_id) REFERENCES league(id) ON DELETE CASCADE, UNIQUE(league_id, name), UNIQUE(league_id, short_name) ); League Divisions CREATE TABLE league_division ( id INTEGER PRIMARY KEY, league_id INTEGER NOT NULL, conference_id INTEGER, name VARCHAR(100) NOT NULL, short_name VARCHAR(20) NOT NULL, display_order INTEGER NOT NULL DEFAULT 1, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (league_id) REFERENCES league(id) ON DELETE CASCADE, FOREIGN KEY (conference_id) REFERENCES league_conference(id) ON DELETE CASCADE, UNIQUE(league_id, name), UNIQUE(league_id, short_name) ); Playoff Formats CREATE TABLE playoff_format ( id INTEGER PRIMARY KEY, format_code VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(100) NOT NULL, description TEXT, teams_qualify INTEGER NOT NULL, rounds INTEGER NOT NULL, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP ); Constraint/Relationship notes Primary Key : id - Unique identifier for each league Foreign Key : world_id - Links to the world this league exists in Prestige Rating : 1-100 scale affecting player desirability and media attention Professional Status : Determines if players receive compensation Salary Cap : Optional salary limit for professional leagues Team Limits : Minimum and maximum number of teams allowed Structure Options : Conferences and divisions can be enabled independently Geographic Rules : When enabled, restricts team locations based on league countries League Countries : Many-to-many relationship allowing leagues to span multiple countries Primary Country : One country can be marked as the league's primary base Membership Rules : Flexible rule system for team eligibility Rule types: 'geographic_restriction', 'stadium_capacity', 'financial_requirement', etc. Rule values: JSON or string values defining specific requirements League Conferences : Optional organizational structure within leagues Conferences can exist without divisions Display order determines UI presentation League Divisions : Optional sub-structure within conferences or leagues Can belong to a conference or directly to a league (conference_id nullable) Display order determines UI presentation Playoff Formats : Standardized playoff structures Format codes: 'single_elimination', 'double_elimination', 'round_robin', 'bracket_8', 'bracket_16', etc. Teams qualify: Number of teams that make playoffs Rounds: Number of playoff rounds Additional Rules : League-specific gameplay rules will be stored in separate league_rules table for extensibility League Standings Model Tracks the performance of each team within a specific league for a given season. This is the source for playoff qualification. CREATE TABLE league_standings ( id INTEGER PRIMARY KEY, season_year INTEGER NOT NULL, league_id INTEGER NOT NULL, team_id INTEGER NOT NULL, wins INTEGER NOT NULL DEFAULT 0, losses INTEGER NOT NULL DEFAULT 0, ties INTEGER NOT NULL DEFAULT 0, points_for INTEGER NOT NULL DEFAULT 0, points_against INTEGER NOT NULL DEFAULT 0, UNIQUE(season_year, league_id, team_id), FOREIGN KEY (league_id) REFERENCES league(id) ON DELETE CASCADE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE ); Team & Organization Models Team Model The Team table represents football teams that can participate in multiple leagues. Each team has location, branding, and organizational attributes. CREATE TABLE team ( id INTEGER PRIMARY KEY, world_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, short_name VARCHAR(20) NOT NULL, city_id INTEGER NOT NULL, owner_staff_id INTEGER, head_coach_staff_id INTEGER, current_playbook_id INTEGER, founded_year INTEGER, primary_color VARCHAR(7) NOT NULL, secondary_color VARCHAR(7) NOT NULL, mascot_name VARCHAR(50), budget DECIMAL(12,2) NOT NULL DEFAULT 0.00, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE, FOREIGN KEY (city_id) REFERENCES city(id) ON DELETE RESTRICT, FOREIGN KEY (owner_staff_id) REFERENCES staff(id) ON DELETE SET NULL, FOREIGN KEY (head_coach_staff_id) REFERENCES staff(id) ON DELETE SET NULL, FOREIGN KEY (current_playbook_id) REFERENCES playbook(id) ON DELETE SET NULL ); Supporting Tables Team League Memberships (Many-to-Many) CREATE TABLE team_league ( team_id INTEGER NOT NULL, league_id INTEGER NOT NULL, conference_id INTEGER, division_id INTEGER, joined_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, is_active BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY (team_id, league_id), FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE, FOREIGN KEY (league_id) REFERENCES league(id) ON DELETE CASCADE, FOREIGN KEY (conference_id) REFERENCES league_conference(id) ON DELETE SET NULL, FOREIGN KEY (division_id) REFERENCES league_division(id) ON DELETE SET NULL ); Team Artwork CREATE TABLE team_artwork ( id INTEGER PRIMARY KEY, team_id INTEGER NOT NULL, artwork_type VARCHAR(50) NOT NULL, file_url VARCHAR(255) NOT NULL, description TEXT, is_primary BOOLEAN NOT NULL DEFAULT FALSE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE ); Team Roster (Manages which players are on the team and their current status) CREATE TABLE team_roster ( id INTEGER PRIMARY KEY, team_id INTEGER NOT NULL, player_id INTEGER NOT NULL, status VARCHAR(50) NOT NULL DEFAULT 'active', -- e.g., 'active', 'injured_reserve' UNIQUE(team_id, player_id), FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE, FOREIGN KEY (player_id) REFERENCES player(id) ON DELETE CASCADE ); Depth Charts (Defines the strategic packages or formations a team uses) CREATE TABLE depth_chart ( id INTEGER PRIMARY KEY, team_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, -- e.g., \"Base Offense\", \"Nickel Defense\" is_default BOOLEAN NOT NULL DEFAULT FALSE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE, UNIQUE(team_id, name) ); Depth Chart Positions (Assigns players from the roster to specific positions and depths within a strategic package) CREATE TABLE depth_chart_position ( id INTEGER PRIMARY KEY, depth_chart_id INTEGER NOT NULL, player_id INTEGER NOT NULL, position_id INTEGER NOT NULL, depth_order INTEGER NOT NULL, FOREIGN KEY (depth_chart_id) REFERENCES depth_chart(id) ON DELETE CASCADE, FOREIGN KEY (player_id) REFERENCES player(id) ON DELETE CASCADE, FOREIGN KEY (position_id) REFERENCES player_position(id) ON DELETE RESTRICT, UNIQUE(depth_chart_id, position_id, depth_order) ); Constraint/Relationship notes Primary Key : id - Unique identifier for each team Foreign Keys : world_id - Links to the world this team exists in city_id - Team's home city location (RESTRICT prevents deletion of cities with teams) Team Identity : Name, colors, mascot, and logo define team branding Leadership : The owner_staff_id and head_coach_staff_id fields link directly to the staff table. This provides a formal connection to the individuals filling these roles, allowing the simulation to access their attributes and personalities. Multi-League Membership : Teams can participate in multiple leagues simultaneously League Structure : Teams can be assigned to specific conferences/divisions within each league Team Artwork : Flexible system for storing multiple artwork types Artwork types: 'logo', 'helmet', 'jersey_home', 'jersey_away', 'banner', 'mascot_image' Primary flag indicates main artwork for each type Budget : Team's available funds for operations and player salaries Geographic Inheritance : Teams inherit economic and cultural modifiers from their city location Stadium Relationships : Teams can play in multiple stadiums - relationships will be managed through separate stadium and team_stadium tables Future Expansion : Team facilities, staff, and historical records will be stored in separate tables Playbook Model Represents a collection of plays that a team can use. CREATE TABLE playbook ( id INTEGER PRIMARY KEY, team_id INTEGER, name VARCHAR(100) NOT NULL, description TEXT, is_default BOOLEAN NOT NULL DEFAULT FALSE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE SET NULL ); Constraint/Relationship notes team_id : The team this playbook belongs to. Can be NULL for default, system-wide playbooks. is_default : Flags playbooks that are available to all teams. Play Design Model Defines the abstract concept of a single football play. CREATE TABLE play_design ( id INTEGER PRIMARY KEY, playbook_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, play_type VARCHAR(50) NOT NULL, formation VARCHAR(50), base_description TEXT, FOREIGN KEY (playbook_id) REFERENCES playbook(id) ON DELETE CASCADE ); Constraint/Relationship notes play_type : Categorical type (e.g., 'RUSH', 'PASS', 'PUNT', 'FIELD_GOAL'). base_description : A template for the text log, e.g., \"{QB_NAME} hands off to {RB_NAME}...\". Stadium Model The Stadium table represents the physical venues where games are played. Each stadium has a location, capacity, and specific characteristics that can affect gameplay. CREATE TABLE stadium ( id INTEGER PRIMARY KEY, world_id INTEGER NOT NULL, city_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, capacity INTEGER NOT NULL, year_built INTEGER, stadium_type VARCHAR(20) NOT NULL DEFAULT 'open_air', playing_surface VARCHAR(20) NOT NULL DEFAULT 'grass', created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE, FOREIGN KEY (city_id) REFERENCES city(id) ON DELETE RESTRICT ); Constraint/Relationship notes Primary Key : id - Unique identifier for each stadium. Foreign Keys : world_id - Links the stadium to the world it exists in. city_id - The stadium's home city, which also links it to the cascading modifier system. RESTRICT prevents deleting a city that has a stadium. Attributes : stadium_type : Categorical type of stadium (e.g., 'open_air', 'retractable_roof', 'dome'). playing_surface : The type of field turf (e.g., 'grass', 'artificial_turf', 'hybrid'). Team Relationship : A team's home stadium will be defined through a separate team_stadium relationship table. Entity Generation Models These models provide a flexible, data-driven framework for generating new entities like players. This system uses archetypes to define templates and configurations to control their spawn rates over time and across different contexts (e.g., for a specific league or country). Archetype Model The Archetype table defines templates for different types of entities. For players, this could be 'Pocket Passer QB' or 'Coverage Safety'. CREATE TABLE archetype ( id INTEGER PRIMARY KEY, entity_type VARCHAR(50) NOT NULL, name VARCHAR(100) NOT NULL, description TEXT, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, UNIQUE(entity_type, name) ); Supporting Tables Archetype Attributes CREATE TABLE archetype_attribute ( id INTEGER PRIMARY KEY, archetype_id INTEGER NOT NULL, attribute_name VARCHAR(50) NOT NULL, base_value INTEGER NOT NULL, FOREIGN KEY (archetype_id) REFERENCES archetype(id) ON DELETE CASCADE, UNIQUE(archetype_id, attribute_name) ); Constraint/Relationship notes Primary Key : id - Unique identifier for each archetype. entity_type : The kind of entity this archetype defines (e.g., 'player', 'coach'). archetype_attribute : This table stores the baseline values for all relevant attributes of an archetype (e.g., for a player archetype, attribute_name could be 'speed' or 'strength'). The generation logic will use this base_value and apply randomization to create unique individuals. Generation Configuration Model This polymorphic table defines how frequently different archetypes should be generated for a given scope (e.g., a league, a country, or globally). This allows generation logic to change over time and by region. CREATE TABLE generation_config ( id INTEGER PRIMARY KEY, config_scope VARCHAR(50) NOT NULL, scope_id INTEGER NOT NULL, archetype_id INTEGER NOT NULL, spawn_weight INTEGER NOT NULL DEFAULT 100, start_year INTEGER NOT NULL, end_year INTEGER, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (archetype_id) REFERENCES archetype(id) ON DELETE CASCADE ); Constraint/Relationship notes Polymorphic Scope : config_scope : Defines the context for this configuration (e.g., 'world', 'league', 'country'). scope_id : The ID of the record in the table defined by config_scope . archetype_id : The archetype this configuration applies to. spawn_weight : A relative weight determining the probability of this archetype being generated within its scope. Higher values are more common. start_year / end_year : Defines the range of seasons (inclusive) during which this configuration is active, allowing for player generation to evolve over time. end_year can be NULL for an indefinite period. People & Character Models Individual Model The Individual table is the base representation for any person in the game world, including players, coaches, owners, and staff. It stores common personal information and personality traits. CREATE TABLE individual ( id INTEGER PRIMARY KEY, world_id INTEGER NOT NULL, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, birth_date DATE NOT NULL, home_city_id INTEGER NOT NULL, desire_to_win INTEGER NOT NULL DEFAULT 50, greed INTEGER NOT NULL DEFAULT 50, demeanor INTEGER NOT NULL DEFAULT 50, luck INTEGER NOT NULL DEFAULT 50, loyalty INTEGER NOT NULL DEFAULT 50, patience INTEGER NOT NULL DEFAULT 50, likability INTEGER NOT NULL DEFAULT 50, is_draft_eligible BOOLEAN NOT NULL DEFAULT FALSE, draft_year INTEGER, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE, FOREIGN KEY (home_city_id) REFERENCES city(id) ON DELETE RESTRICT ); Constraint/Relationship notes Primary Key : id - Unique identifier for each individual. Foreign Keys : world_id - Links the individual to a specific game world. home_city_id - The individual's home city, which determines their home state and country. Personality Ratings : Scored 1-100, influencing decisions and interactions. desire_to_win : Competitiveness. greed : Focus on financial gain. demeanor : Public and private temperament. luck : A general modifier for random events. loyalty : Willingness to stay with current teams, friends, etc. patience : Tolerance for lack of success or development. Relationships : The generic relationship table manages connections between entities, including individual-to-individual relationships like family, friendships, or rivalries. Character Roles : This table serves as a base, with specific roles like Player or Coach defined in other tables that link back to this one. Draft Status : is_draft_eligible and draft_year manage a player's entry into the league draft pool. Player Position Model This table is a simple lookup that defines all valid player positions in the game, ensuring standardization. CREATE TABLE player_position ( id INTEGER PRIMARY KEY, name VARCHAR(50) NOT NULL UNIQUE, abbreviation VARCHAR(5) NOT NULL UNIQUE, position_group VARCHAR(10) NOT NULL -- e.g., 'QB', 'RB', 'WR', 'OL', 'DL', 'LB', 'DB', 'K', 'P' ); Constraint/Relationship notes position_group : A categorical assignment for easier logic filtering and AI substitutions (e.g., 'QB', 'RB', 'WR', 'OL', 'DL', 'LB', 'DB', 'K', 'P'). Player Model The Player table contains all athletic attributes and game-specific information for an individual who is a football player. It links to an Individual record for personal details. CREATE TABLE player ( id INTEGER PRIMARY KEY, individual_id INTEGER NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, status VARCHAR(50) NOT NULL DEFAULT 'free_agent', speed INTEGER NOT NULL, explosiveness INTEGER NOT NULL, strength INTEGER NOT NULL, stamina INTEGER NOT NULL, catching INTEGER NOT NULL, ball_security INTEGER NOT NULL, footwork INTEGER NOT NULL, breaking_tackles INTEGER NOT NULL, anticipation INTEGER NOT NULL, blocking_power INTEGER NOT NULL, blocking_technique INTEGER NOT NULL, shed_blocks INTEGER NOT NULL, tackling INTEGER NOT NULL, teamwork INTEGER NOT NULL, communication INTEGER NOT NULL, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (individual_id) REFERENCES individual(id) ON DELETE CASCADE ); Supporting Tables Player Stats History CREATE TABLE player_stats_history ( id INTEGER PRIMARY KEY, player_id INTEGER NOT NULL, season_year INTEGER NOT NULL, level VARCHAR(50) NOT NULL, team_name VARCHAR(100), -- Statistical fields for all positions will be columns here created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (player_id) REFERENCES player(id) ON DELETE CASCADE ); Constraint/Relationship notes Primary Key : id - Unique identifier for each player record. Foreign Key : individual_id - A one-to-one link to the Individual table for personal data. Status : Player's current status (e.g., 'free_agent', 'on_roster', 'injured', 'retired'). Athletic Ratings : Scored 1-100, representing the player's skills on the field. Team Relationship : A player's contractual relationship with a team is managed through the player_contract and player_contract_year tables. Statistical History : The player_stats_history table tracks a player's performance at various levels (e.g., 'high_school', 'college', 'pro') throughout their career. Personnel, Contracts & Staff Models This section contains every table related to contracts, salaries, and employment for both players and staff. This makes the financial and team management aspects of the schema much easier to understand as a single system. Player Contract Model The Player Contract table holds the overarching terms of an agreement between a player and a team, including duration, options, and special clauses. CREATE TABLE player_contract ( id INTEGER PRIMARY KEY, player_id INTEGER NOT NULL, team_id INTEGER NOT NULL, start_year INTEGER NOT NULL, total_years INTEGER NOT NULL, no_trade_clause BOOLEAN NOT NULL DEFAULT FALSE, team_option_year INTEGER, player_option_year INTEGER, is_active BOOLEAN NOT NULL DEFAULT TRUE, FOREIGN KEY (player_id) REFERENCES player(id) ON DELETE CASCADE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE ); Constraint/Relationship notes Links : Connects a player to a team . Duration : start_year and total_years define the guaranteed length of the contract. no_trade_clause : A boolean flag to prevent the player from being traded. Options : team_option_year and player_option_year are nullable integers. If a value is present, it indicates the season in which a team or player option can be exercised to extend the contract. is_active : Flags the player's current contract. A player can have historical (inactive) contracts but only one active one. Player Contract Year Model This table stores the year-by-year financial details for a specific contract, allowing for salary structures that change over the life of the deal. CREATE TABLE player_contract_year ( id INTEGER PRIMARY KEY, player_contract_id INTEGER NOT NULL, season_year INTEGER NOT NULL, base_salary_usd DECIMAL(12,2) NOT NULL, signing_bonus_proration_usd DECIMAL(12,2) NOT NULL DEFAULT 0.00, performance_bonus_usd DECIMAL(12,2) NOT NULL DEFAULT 0.00, performance_bonus_criteria TEXT, is_guaranteed BOOLEAN NOT NULL DEFAULT TRUE, UNIQUE (player_contract_id, season_year), FOREIGN KEY (player_contract_id) REFERENCES player_contract(id) ON DELETE CASCADE ); Constraint/Relationship notes Foreign Key : Links each yearly breakdown to a master player_contract . Unique Constraint : Ensures there is only one financial record per year for any given contract. Financials : Defines the player's compensation for that specific season_year . performance_bonus_criteria : A text field describing the conditions that must be met for the bonus to be earned (e.g., \"1200+ rushing yards\", \"Pro Bowl selection\"). This allows for flexible, readable bonus terms. Staff Role Type Model This is a lookup table that defines all possible job roles in the game world, both for team personnel and personal staff. CREATE TABLE staff_role_type ( id INTEGER PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, category VARCHAR(50) NOT NULL, description TEXT ); Constraint/Relationship notes name : The user-facing name of the role (e.g., 'Head Coach', 'Financial Advisor'). category : A broader grouping for logic and UI (e.g., 'Coaching Staff', 'Medical Staff', 'Personal Finance', 'Personal Legal'). Staff Model The Staff table is the base for any non-player individual who is employed. It links an individual to their employer, which can be either a team or another individual . It holds universal employment data like salary and contract terms. CREATE TABLE staff ( id INTEGER PRIMARY KEY, individual_id INTEGER NOT NULL UNIQUE, staff_role_type_id INTEGER NOT NULL, employer_team_id INTEGER, employer_individual_id INTEGER, role_title VARCHAR(100) NOT NULL, salary_usd DECIMAL(12,2) NOT NULL, contract_start_year INTEGER NOT NULL, contract_years INTEGER NOT NULL, status VARCHAR(50) NOT NULL DEFAULT 'active', FOREIGN KEY (individual_id) REFERENCES individual(id) ON DELETE CASCADE, FOREIGN KEY (staff_role_type_id) REFERENCES staff_role_type(id) ON DELETE RESTRICT, FOREIGN KEY (employer_team_id) REFERENCES team(id) ON DELETE SET NULL, FOREIGN KEY (employer_individual_id) REFERENCES individual(id) ON DELETE SET NULL, CONSTRAINT check_single_employer CHECK ( (employer_team_id IS NOT NULL AND employer_individual_id IS NULL) OR (employer_team_id IS NULL AND employer_individual_id IS NOT NULL) ) ); Constraint/Relationship notes Foreign Keys : Links to the person ( individual_id ) and their job definition ( staff_role_type_id ). Flexible Employer : employer_team_id is for team staff. employer_individual_id is for personal staff. check_single_employer : This crucial database constraint ensures that a staff member must have exactly one employer\u2014either a team OR an individual, but never both or neither. role_title : The specific title for this instance of the role (e.g. 'Offensive Coordinator' is a title for the 'Coach' role type). Financial Advisor Attributes Model Stores attributes specific only to financial advisors. CREATE TABLE financial_advisor_attributes ( staff_id INTEGER PRIMARY KEY, investment_skill INTEGER NOT NULL DEFAULT 50, risk_tolerance_philosophy VARCHAR(100), specialty VARCHAR(100), FOREIGN KEY (staff_id) REFERENCES staff(id) ON DELETE CASCADE ); Legal Advisor Attributes Model Stores attributes specific only to lawyers/agents. CREATE TABLE legal_advisor_attributes ( staff_id INTEGER PRIMARY KEY, contract_negotiation_skill INTEGER NOT NULL DEFAULT 50, litigation_skill INTEGER NOT NULL DEFAULT 50, bar_association_number VARCHAR(100), FOREIGN KEY (staff_id) REFERENCES staff(id) ON DELETE CASCADE ); Personal Wellness Attributes Model A generic table for personal staff focused on the character's well-being, such as chefs or personal trainers. CREATE TABLE personal_wellness_attributes ( staff_id INTEGER PRIMARY KEY, effectiveness_skill INTEGER NOT NULL DEFAULT 50, specialty VARCHAR(100), FOREIGN KEY (staff_id) REFERENCES staff(id) ON DELETE CASCADE ); Coach Attributes Model Stores attributes specific to coaches, influencing their AI behavior. CREATE TABLE coach_attributes ( staff_id INTEGER PRIMARY KEY, play_calling_skill INTEGER NOT NULL DEFAULT 50, risk_tolerance INTEGER NOT NULL DEFAULT 50, preferred_style VARCHAR(100), FOREIGN KEY (staff_id) REFERENCES staff(id) ON DELETE CASCADE ); Game & Simulation Models These models define the structure for managing an active game and recording the results of individual play simulations. They form the link between the static team/player data and the dynamic simulation engine. Game Model The Game table stores the static, high-level information about a single football game matchup, such as the teams involved, location, and date. CREATE TABLE game ( id INTEGER PRIMARY KEY, world_id INTEGER NOT NULL, home_team_id INTEGER NOT NULL, away_team_id INTEGER NOT NULL, stadium_id INTEGER NOT NULL, game_date TIMESTAMPTZ NOT NULL, season_year INTEGER NOT NULL, week_number INTEGER, game_slot INTEGER, status VARCHAR(20) NOT NULL DEFAULT 'scheduled', created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE, FOREIGN KEY (home_team_id) REFERENCES team(id) ON DELETE CASCADE, FOREIGN KEY (away_team_id) REFERENCES team(id) ON DELETE CASCADE, FOREIGN KEY (stadium_id) REFERENCES stadium(id) ON DELETE RESTRICT ); Constraint/Relationship notes Primary Key : id - Unique identifier for each game. Foreign Keys : stadium_id - Links the game to the stadium where it was played. RESTRICT prevents deleting a stadium if it has games associated with it. Status : The current state of the game (e.g., 'scheduled', 'in_progress', 'final'). State Separation : The dynamic, play-by-play state of the game (score, clock, possession) is stored in the separate game_state table. Game State Model This table tracks the dynamic state of a single game, which is updated after every play. It holds all the information that changes during the game, such as score, time, and ball position. CREATE TABLE game_state ( game_id INTEGER PRIMARY KEY, home_score INTEGER NOT NULL DEFAULT 0, away_score INTEGER NOT NULL DEFAULT 0, current_quarter INTEGER, time_remaining_in_quarter INTEGER, team_with_possession_id INTEGER, down INTEGER, distance INTEGER, ball_on_yard_line INTEGER, is_drive_active BOOLEAN NOT NULL DEFAULT FALSE, drive_start_yard_line INTEGER, drive_start_time_in_quarter INTEGER, FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE, FOREIGN KEY (team_with_possession_id) REFERENCES team(id) ON DELETE SET NULL ); Constraint/Relationship notes Primary Key : game_id - This creates a one-to-one relationship with the game table. Game State Fields : time_remaining_in_quarter : Measured in seconds. ball_on_yard_line : Represents the position of the ball from the perspective of the offense's goal line (e.g., a value of 25 means the ball is on the offense's own 25-yard line). Drive Tracking : is_drive_active , drive_start_yard_line , and drive_start_time_in_quarter are used by the simulation engine to manage a single possession. Note on the Field Model : The game_state table stores the persistent state of a game between plays. The detailed, coordinate-based \"Field Model\" described in the architecture notes is a transient, in-memory data structure used by the simulation engine during the execution of a single play. The results are then captured in the play table and used to update this game_state record. Game Plan Model Stores the high-level strategic instructions for a team for a specific game, influencing the AI coach's play-calling decisions. CREATE TABLE game_plan ( id INTEGER PRIMARY KEY, game_id INTEGER NOT NULL, team_id INTEGER NOT NULL, pass_run_ratio DECIMAL(3,2) NOT NULL DEFAULT 0.50, -- 0.0 = 100% run, 1.0 = 100% pass offensive_aggression INTEGER NOT NULL DEFAULT 50, -- 1-100 scale for 4th down attempts, trick plays defensive_aggression INTEGER NOT NULL DEFAULT 50, -- 1-100 scale for blitzing, all-out coverage UNIQUE(game_id, team_id), FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE ); Constraint/Relationship notes Unique Constraint : Ensures each team has only one game plan per game. Ratios & Scales : These values provide high-level guidance to the simulation engine's AI. pass_run_ratio : Governs the tendency to call pass plays vs. run plays. offensive_aggression : Influences decisions like going for it on 4th down. defensive_aggression : Influences the frequency of blitzes vs. conservative coverage. Coach Instruction Log Model Logs the instructions a user gives to their AI coach during a game, providing a history of their strategic decisions. CREATE TABLE coach_instruction_log ( id INTEGER PRIMARY KEY, game_id INTEGER NOT NULL, team_id INTEGER NOT NULL, quarter INTEGER, play_number INTEGER, instruction_text TEXT NOT NULL, was_override BOOLEAN NOT NULL DEFAULT FALSE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE ); Play Model The Play table serves as a historical log, recording the key details and outcome of every single play that occurs within a game. CREATE TABLE play ( id INTEGER PRIMARY KEY, game_id INTEGER NOT NULL, play_number INTEGER NOT NULL, offense_team_id INTEGER NOT NULL, defense_team_id INTEGER NOT NULL, offense_play_design_id INTEGER, defense_play_design_id INTEGER, quarter INTEGER NOT NULL, down INTEGER, distance INTEGER, start_yard_line INTEGER, end_yard_line INTEGER, result_type VARCHAR(50), yards_gained INTEGER NOT NULL, play_description TEXT, turnover_type VARCHAR(50), created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE, FOREIGN KEY (offense_team_id) REFERENCES team(id) ON DELETE CASCADE, FOREIGN KEY (defense_team_id) REFERENCES team(id) ON DELETE CASCADE, FOREIGN KEY (offense_play_design_id) REFERENCES play_design(id) ON DELETE SET NULL, FOREIGN KEY (defense_play_design_id) REFERENCES play_design(id) ON DELETE SET NULL ); Constraint/Relationship notes Primary Key : id - Unique identifier for each play record. Foreign Keys : game_id links the play to the specific game it occurred in. Play Calling : The offense_play_design_id and defense_play_design_id fields link to the specific plays called by each team's AI, creating a crucial record of strategic decisions versus outcomes. These are nullable to account for plays without a formal design (e.g., penalties before the snap). Play Log : This table provides a complete, sequential record of a game's events, which can be used for box scores, recaps, and analysis. result_type : A categorical description of the play (e.g., 'RUSH', 'PASS_COMPLETE', 'PASS_INCOMPLETE', 'PUNT', 'FIELD_GOAL_MADE', 'PENALTY'). turnover_type : Specifies the type of turnover, if any (e.g., 'INTERCEPTION', 'FUMBLE_LOST'). Scoring Summary Model A dedicated table to track every scoring play in a game. This provides an easy-to-query source for building a game's scoring summary without parsing the full play-by-play log. CREATE TABLE scoring_summary ( id INTEGER PRIMARY KEY, play_id INTEGER NOT NULL, game_id INTEGER NOT NULL, scoring_team_id INTEGER NOT NULL, quarter INTEGER NOT NULL, time_remaining_in_quarter INTEGER NOT NULL, points_scored INTEGER NOT NULL, scoring_play_type VARCHAR(50) NOT NULL, description TEXT, FOREIGN KEY (play_id) REFERENCES play(id) ON DELETE CASCADE, FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE, FOREIGN KEY (scoring_team_id) REFERENCES team(id) ON DELETE CASCADE ); Player Game Stats Model Stores the aggregated statistics for a single player in a single game. This table is the source for box scores. CREATE TABLE player_game_stats ( id INTEGER PRIMARY KEY, game_id INTEGER NOT NULL, player_id INTEGER NOT NULL, team_id INTEGER NOT NULL, -- Passing Stats pass_attempts INTEGER DEFAULT 0, pass_completions INTEGER DEFAULT 0, pass_yards INTEGER DEFAULT 0, pass_touchdowns INTEGER DEFAULT 0, pass_interceptions INTEGER DEFAULT 0, -- Rushing Stats rush_attempts INTEGER DEFAULT 0, rush_yards INTEGER DEFAULT 0, rush_touchdowns INTEGER DEFAULT 0, -- Receiving Stats receptions INTEGER DEFAULT 0, receiving_yards INTEGER DEFAULT 0, receiving_touchdowns INTEGER DEFAULT 0, -- Defensive Stats tackles INTEGER DEFAULT 0, sacks DECIMAL(3,1) DEFAULT 0.0, interceptions_caught INTEGER DEFAULT 0, -- Special Teams Stats field_goals_made INTEGER DEFAULT 0, field_goals_attempted INTEGER DEFAULT 0, punts INTEGER DEFAULT 0, punt_yards INTEGER DEFAULT 0, -- Return Stats kick_returns INTEGER DEFAULT 0, kick_return_yards INTEGER DEFAULT 0, kick_return_touchdowns INTEGER DEFAULT 0, punt_returns INTEGER DEFAULT 0, punt_return_yards INTEGER DEFAULT 0, punt_return_touchdowns INTEGER DEFAULT 0, UNIQUE(game_id, player_id), FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE, FOREIGN KEY (player_id) REFERENCES player(id) ON DELETE CASCADE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE );","title":"Football Simulation Game - Data Models"},{"location":"technical/data_models/#football-simulation-game-data-models","text":"","title":"Football Simulation Game - Data Models"},{"location":"technical/data_models/#table-of-contents","text":"Core World & System Models World Model Relationship Model User & Access Control Models User Model Role Model User World Role Model Geographic Models Country Model State Model City Model League & Competition Models League Model League Standings Model Team & Organization Models Team Model Playbook Model Play Design Model Stadium Model Entity Generation Models Archetype Model Generation Configuration Model People & Character Models Individual Model Player Position Model Player Model Personnel, Contracts & Staff Models Player Contract Model Player Contract Year Model Staff Role Type Model Staff Model Financial Advisor Attributes Model Legal Advisor Attributes Model Personal Wellness Attributes Model Game & Simulation Models Game Model Game State Model Game Plan Model Play Model Player Game Stats Model","title":"Table of Contents"},{"location":"technical/data_models/#core-world-system-models","text":"These models define the foundational elements of the simulation universe. All data resides in a single Postgres database.","title":"Core World &amp; System Models"},{"location":"technical/data_models/#world-model","text":"The World table represents a single game universe/save file. There is only one world record per game instance, serving as the root container for all game data and global settings. CREATE TABLE world ( id INTEGER PRIMARY KEY, name VARCHAR(100) NOT NULL, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, last_played_date TIMESTAMPTZ, current_season INTEGER NOT NULL DEFAULT 1, current_week INTEGER NOT NULL DEFAULT 1, start_year INTEGER NOT NULL, global_growth_rate DECIMAL(4,3) NOT NULL DEFAULT 1.000, sim_speed_factor DECIMAL(3,2) NOT NULL DEFAULT 1.00, randomness_factor DECIMAL(3,2) NOT NULL DEFAULT 1.00 ); (Note: I have updated DATETIME to TIMESTAMPTZ for better timezone handling in Postgres, reflecting the user.preferred_timezone field)","title":"World Model"},{"location":"technical/data_models/#constraintrelationship-notes","text":"Primary Key : id - Single record per game instance Global Growth Rate : Base economic growth rate applied worldwide (1.000 = no growth, 1.020 = 2% growth) Simulation Settings : sim_speed_factor : Multiplier for adjusting simulation speed (e.g., for UI). randomness_factor : A global modifier for random events in the simulation. Economy Modifiers : Will be stored in separate world_economy_modifiers table to allow flexible configuration Global Settings : Additional game-wide settings will be stored in separate world_settings table for extensibility","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#relationship-model","text":"The Relationship table is a generic, polymorphic model designed to track the strength and type of connection between any two entities in the game. This can represent person-to-person friendships, team rivalries, player-to-team loyalty, etc. CREATE TABLE relationship ( entity1_id INTEGER NOT NULL, entity1_type VARCHAR(50) NOT NULL, entity2_id INTEGER NOT NULL, entity2_type VARCHAR(50) NOT NULL, relationship_type VARCHAR(50) NOT NULL, strength INTEGER NOT NULL DEFAULT 0, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (entity1_id, entity1_type, entity2_id, entity2_type, relationship_type) );","title":"Relationship Model"},{"location":"technical/data_models/#constraintrelationship-notes_1","text":"Composite Primary Key : Ensures a unique relationship type between any two specific entities. Polymorphic Design : entity1_id / entity2_id : The ID of the entity. entity1_type / entity2_type : The name of the table the ID belongs to (e.g., 'individual', 'team', 'league'). Relationship Type : A descriptor for the relationship (e.g., 'friendship', 'rivalry', 'familial_sibling', 'employment'). Strength : A numeric counter representing the quality of the relationship. Can be positive or negative (e.g., -100 to 100). Direction : For non-symmetrical relationships (like 'employment'), entity1 can be considered the source/subject and entity2 the target/object. For symmetrical relationships ('friendship'), the order is not significant, and applications should check for both permutations if necessary.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#user-access-control-models","text":"These models contain all tables related to the application users and their permissions.","title":"User &amp; Access Control Models"},{"location":"technical/data_models/#user-model","text":"The User table stores basic information and preferences for players of the game. CREATE TABLE \"user\" ( id INTEGER PRIMARY KEY, username VARCHAR(50) NOT NULL UNIQUE, email VARCHAR(255) NOT NULL UNIQUE, password_hash VARCHAR(255) NOT NULL, display_name VARCHAR(100), created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, last_login_date TIMESTAMPTZ, is_active BOOLEAN NOT NULL DEFAULT TRUE, preferred_timezone VARCHAR(50) DEFAULT 'UTC' ); (Note: user is a reserved keyword in SQL, so it's quoted as \"user\" for safety. DATETIME changed to TIMESTAMPTZ.)","title":"User Model"},{"location":"technical/data_models/#constraintrelationship-notes_2","text":"Primary Key : id - Unique identifier for each user Unique Constraints : username and email must be unique across all users Authentication : Password stored as hash for security Display Name : Optional friendly name for UI display Activity Tracking : Last login and active status for user management Timezone : User's preferred timezone for date/time display Future Expansion : Additional user preferences and settings will be stored in separate user_preferences table Game Characters : User's in-game characters/personas will be stored in separate character table linking to this user","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#role-model","text":"The Role table defines a standardized list of permission levels a user can have within a game world. CREATE TABLE role ( id INTEGER PRIMARY KEY, name VARCHAR(50) NOT NULL UNIQUE, description TEXT );","title":"Role Model"},{"location":"technical/data_models/#constraintrelationship-notes_3","text":"Primary Key : id - Unique identifier for the role. name : The machine-friendly name of the role (e.g., 'commissioner', 'owner', 'observer'). description : A user-friendly explanation of what the role entails.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#user-world-role-model","text":"This table links a user to a world and assigns them a specific role , creating a proper relationship. This is crucial for managing permissions, such as who can advance the simulation clock or edit league parameters. CREATE TABLE user_world_role ( user_id INTEGER NOT NULL, world_id INTEGER NOT NULL, role_id INTEGER NOT NULL, character_individual_id INTEGER, PRIMARY KEY (user_id, world_id), FOREIGN KEY (user_id) REFERENCES \"user\"(id) ON DELETE CASCADE, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE, FOREIGN KEY (role_id) REFERENCES role(id), FOREIGN KEY (character_individual_id) REFERENCES individual(id) ON DELETE SET NULL );","title":"User World Role Model"},{"location":"technical/data_models/#constraintrelationship-notes_4","text":"Composite Primary Key : Ensures a user has only one primary role per world. Foreign Keys : Links the user account, game world, and the user's specific role for that world. character_individual_id : If the user has a playable character in this world (like an owner or GM), this links to their corresponding record in the individual table.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#geographic-models","text":"","title":"Geographic Models"},{"location":"technical/data_models/#country-model","text":"The Country table represents different nations in the game world. Each country has economic, climate, and cultural characteristics that affect gameplay within that region. CREATE TABLE country ( id INTEGER PRIMARY KEY, world_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL UNIQUE, code VARCHAR(3) NOT NULL UNIQUE, wealth_level DECIMAL(5,2) NOT NULL DEFAULT 1.00, avg_temperature INTEGER NOT NULL, football_interest_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, economic_stability DECIMAL(3,2) NOT NULL DEFAULT 1.00, population INTEGER, currency_code VARCHAR(3) NOT NULL DEFAULT 'USD', growth_rate DECIMAL(4,3) NOT NULL DEFAULT 1.000, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE );","title":"Country Model"},{"location":"technical/data_models/#constraintrelationship-notes_5","text":"Primary Key : id - Unique identifier for each country Foreign Key : world_id - Links to the world this country exists in Unique Constraints : name and code must be unique within a world Wealth Level : Multiplier affecting economic activities (1.00 = baseline, >1.00 = wealthier, <1.00 = poorer) Temperature : Average temperature in Fahrenheit, affects player preferences and costs Football Interest : Modifier for how popular football is in this country (affects attendance, media coverage, etc.) Economic Stability : Affects contract negotiations, sponsorship deals, and market volatility Population : Total population, affects potential fan base and player pool Currency : Local currency code for economic calculations Growth Rate : Annual economic growth rate modifier, which combines with the world.global_growth_rate . Growth Rate Calculation : The effective growth rate for a country is calculated by combining the world's global growth rate with the country's growth rate modifier (e.g., effective_country_growth = world.global_growth_rate * country.growth_rate ). Additional Modifiers : Country-specific gameplay modifiers will be stored in separate country_modifiers table for flexibility","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#state-model","text":"The State table represents states/provinces within countries. Each state has its own economic and cultural characteristics that modify the base country values, creating regional variation within nations. CREATE TABLE state ( id INTEGER PRIMARY KEY, country_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, code VARCHAR(10) NOT NULL, wealth_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, football_interest_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, economic_stability_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, population INTEGER, avg_temperature_modifier INTEGER NOT NULL DEFAULT 0, tax_rate DECIMAL(5,2) NOT NULL DEFAULT 0.00, growth_rate DECIMAL(4,3) NOT NULL DEFAULT 1.000, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (country_id) REFERENCES country(id) ON DELETE CASCADE, UNIQUE(country_id, name), UNIQUE(country_id, code) );","title":"State Model"},{"location":"technical/data_models/#constraintrelationship-notes_6","text":"Primary Key : id - Unique identifier for each state Foreign Key : country_id - Links to the country this state belongs to Unique Constraints : name and code must be unique within each country Wealth Modifier : Multiplier applied to country's wealth level (1.00 = same as country, >1.00 = wealthier than country average) Football Interest Modifier : Applied to country's football interest (stacks with country modifier) Economic Stability Modifier : Applied to country's economic stability Temperature Modifier : Added/subtracted from country's average temperature (in Fahrenheit) Tax Rate : State-specific tax rate affecting team finances and player salaries Population : State population, affects local market size Growth Rate : Annual economic growth rate modifier, which combines with the effective country growth rate. Growth Rate Calculation : The effective growth rate for a state is calculated by combining the effective country growth rate with the state's growth rate modifier (e.g., effective_state_growth = effective_country_growth * state.growth_rate ). Modifier Inheritance : Team calculations will use: country_value * country_modifier * state_modifier Additional Modifiers : State-specific gameplay modifiers will be stored in separate state_modifiers table for flexibility","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#city-model","text":"The City table represents cities within states. Each city has its own economic and cultural characteristics that modify the base state and country values, creating local variation within regions. CREATE TABLE city ( id INTEGER PRIMARY KEY, state_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, wealth_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, football_interest_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, economic_stability_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, population INTEGER NOT NULL, avg_temperature_modifier INTEGER NOT NULL DEFAULT 0, cost_of_living_modifier DECIMAL(3,2) NOT NULL DEFAULT 1.00, growth_rate DECIMAL(4,3) NOT NULL DEFAULT 1.000, market_size VARCHAR(20) NOT NULL DEFAULT 'medium', created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (state_id) REFERENCES state(id) ON DELETE CASCADE, UNIQUE(state_id, name) );","title":"City Model"},{"location":"technical/data_models/#constraintrelationship-notes_7","text":"Primary Key : id - Unique identifier for each city Foreign Key : state_id - Links to the state this city belongs to Unique Constraints : name must be unique within each state Wealth Modifier : Multiplier applied to state's wealth level (1.00 = same as state, >1.00 = wealthier than state average) Football Interest Modifier : Applied to state's football interest (stacks with country and state modifiers) Economic Stability Modifier : Applied to state's economic stability Temperature Modifier : Added/subtracted from state's average temperature (in Fahrenheit) Cost of Living : Affects player salary expectations and team operational costs Growth Rate : Annual economic growth rate modifier, which combines with the effective state growth rate. Market Size : Categorical size ('small', 'medium', 'large', 'major') affecting revenue potential Population : City population, affects local fan base and media market Modifier Inheritance : Team calculations will use: country_value * country_modifier * state_modifier * city_modifier Growth Rate Calculation : The effective growth rate for a city is calculated by combining the effective state growth rate with the city's growth rate modifier. This cascading calculation ( world_growth * country_growth * state_growth * city_growth ) determines the local economic evolution. Additional Modifiers : City-specific gameplay modifiers will be stored in separate city_modifiers table for flexibility","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#league-competition-models","text":"","title":"League &amp; Competition Models"},{"location":"technical/data_models/#league-model","text":"The League table represents football leagues that can span multiple countries. Each league has its own rules, structure, and prestige level that affects gameplay. CREATE TABLE league ( id INTEGER PRIMARY KEY, world_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, short_name VARCHAR(20) NOT NULL, prestige_rating INTEGER NOT NULL DEFAULT 50, is_professional BOOLEAN NOT NULL DEFAULT TRUE, salary_cap DECIMAL(12,2), min_teams INTEGER NOT NULL DEFAULT 8, max_teams INTEGER NOT NULL DEFAULT 32, season_length INTEGER NOT NULL DEFAULT 16, playoff_format VARCHAR(50) NOT NULL DEFAULT 'single_elimination', has_conferences BOOLEAN NOT NULL DEFAULT FALSE, has_divisions BOOLEAN NOT NULL DEFAULT FALSE, enforce_geographic_rules BOOLEAN NOT NULL DEFAULT FALSE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, is_active BOOLEAN NOT NULL DEFAULT TRUE, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE );","title":"League Model"},{"location":"technical/data_models/#supporting-tables","text":"","title":"Supporting Tables"},{"location":"technical/data_models/#league-countries-many-to-many","text":"CREATE TABLE league_country ( league_id INTEGER NOT NULL, country_id INTEGER NOT NULL, is_primary_country BOOLEAN NOT NULL DEFAULT FALSE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, PRIMARY KEY (league_id, country_id), FOREIGN KEY (league_id) REFERENCES league(id) ON DELETE CASCADE, FOREIGN KEY (country_id) REFERENCES country(id) ON DELETE CASCADE );","title":"League Countries (Many-to-Many)"},{"location":"technical/data_models/#league-membership-rules","text":"CREATE TABLE league_membership_rule ( id INTEGER PRIMARY KEY, league_id INTEGER NOT NULL, rule_type VARCHAR(50) NOT NULL, rule_value VARCHAR(255) NOT NULL, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (league_id) REFERENCES league(id) ON DELETE CASCADE );","title":"League Membership Rules"},{"location":"technical/data_models/#league-conferences","text":"CREATE TABLE league_conference ( id INTEGER PRIMARY KEY, league_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, short_name VARCHAR(20) NOT NULL, display_order INTEGER NOT NULL DEFAULT 1, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (league_id) REFERENCES league(id) ON DELETE CASCADE, UNIQUE(league_id, name), UNIQUE(league_id, short_name) );","title":"League Conferences"},{"location":"technical/data_models/#league-divisions","text":"CREATE TABLE league_division ( id INTEGER PRIMARY KEY, league_id INTEGER NOT NULL, conference_id INTEGER, name VARCHAR(100) NOT NULL, short_name VARCHAR(20) NOT NULL, display_order INTEGER NOT NULL DEFAULT 1, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (league_id) REFERENCES league(id) ON DELETE CASCADE, FOREIGN KEY (conference_id) REFERENCES league_conference(id) ON DELETE CASCADE, UNIQUE(league_id, name), UNIQUE(league_id, short_name) );","title":"League Divisions"},{"location":"technical/data_models/#playoff-formats","text":"CREATE TABLE playoff_format ( id INTEGER PRIMARY KEY, format_code VARCHAR(50) NOT NULL UNIQUE, name VARCHAR(100) NOT NULL, description TEXT, teams_qualify INTEGER NOT NULL, rounds INTEGER NOT NULL, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP );","title":"Playoff Formats"},{"location":"technical/data_models/#constraintrelationship-notes_8","text":"Primary Key : id - Unique identifier for each league Foreign Key : world_id - Links to the world this league exists in Prestige Rating : 1-100 scale affecting player desirability and media attention Professional Status : Determines if players receive compensation Salary Cap : Optional salary limit for professional leagues Team Limits : Minimum and maximum number of teams allowed Structure Options : Conferences and divisions can be enabled independently Geographic Rules : When enabled, restricts team locations based on league countries League Countries : Many-to-many relationship allowing leagues to span multiple countries Primary Country : One country can be marked as the league's primary base Membership Rules : Flexible rule system for team eligibility Rule types: 'geographic_restriction', 'stadium_capacity', 'financial_requirement', etc. Rule values: JSON or string values defining specific requirements League Conferences : Optional organizational structure within leagues Conferences can exist without divisions Display order determines UI presentation League Divisions : Optional sub-structure within conferences or leagues Can belong to a conference or directly to a league (conference_id nullable) Display order determines UI presentation Playoff Formats : Standardized playoff structures Format codes: 'single_elimination', 'double_elimination', 'round_robin', 'bracket_8', 'bracket_16', etc. Teams qualify: Number of teams that make playoffs Rounds: Number of playoff rounds Additional Rules : League-specific gameplay rules will be stored in separate league_rules table for extensibility","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#league-standings-model","text":"Tracks the performance of each team within a specific league for a given season. This is the source for playoff qualification. CREATE TABLE league_standings ( id INTEGER PRIMARY KEY, season_year INTEGER NOT NULL, league_id INTEGER NOT NULL, team_id INTEGER NOT NULL, wins INTEGER NOT NULL DEFAULT 0, losses INTEGER NOT NULL DEFAULT 0, ties INTEGER NOT NULL DEFAULT 0, points_for INTEGER NOT NULL DEFAULT 0, points_against INTEGER NOT NULL DEFAULT 0, UNIQUE(season_year, league_id, team_id), FOREIGN KEY (league_id) REFERENCES league(id) ON DELETE CASCADE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE );","title":"League Standings Model"},{"location":"technical/data_models/#team-organization-models","text":"","title":"Team &amp; Organization Models"},{"location":"technical/data_models/#team-model","text":"The Team table represents football teams that can participate in multiple leagues. Each team has location, branding, and organizational attributes. CREATE TABLE team ( id INTEGER PRIMARY KEY, world_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, short_name VARCHAR(20) NOT NULL, city_id INTEGER NOT NULL, owner_staff_id INTEGER, head_coach_staff_id INTEGER, current_playbook_id INTEGER, founded_year INTEGER, primary_color VARCHAR(7) NOT NULL, secondary_color VARCHAR(7) NOT NULL, mascot_name VARCHAR(50), budget DECIMAL(12,2) NOT NULL DEFAULT 0.00, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE, FOREIGN KEY (city_id) REFERENCES city(id) ON DELETE RESTRICT, FOREIGN KEY (owner_staff_id) REFERENCES staff(id) ON DELETE SET NULL, FOREIGN KEY (head_coach_staff_id) REFERENCES staff(id) ON DELETE SET NULL, FOREIGN KEY (current_playbook_id) REFERENCES playbook(id) ON DELETE SET NULL );","title":"Team Model"},{"location":"technical/data_models/#supporting-tables_1","text":"","title":"Supporting Tables"},{"location":"technical/data_models/#team-league-memberships-many-to-many","text":"CREATE TABLE team_league ( team_id INTEGER NOT NULL, league_id INTEGER NOT NULL, conference_id INTEGER, division_id INTEGER, joined_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, is_active BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY (team_id, league_id), FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE, FOREIGN KEY (league_id) REFERENCES league(id) ON DELETE CASCADE, FOREIGN KEY (conference_id) REFERENCES league_conference(id) ON DELETE SET NULL, FOREIGN KEY (division_id) REFERENCES league_division(id) ON DELETE SET NULL );","title":"Team League Memberships (Many-to-Many)"},{"location":"technical/data_models/#team-artwork","text":"CREATE TABLE team_artwork ( id INTEGER PRIMARY KEY, team_id INTEGER NOT NULL, artwork_type VARCHAR(50) NOT NULL, file_url VARCHAR(255) NOT NULL, description TEXT, is_primary BOOLEAN NOT NULL DEFAULT FALSE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE );","title":"Team Artwork"},{"location":"technical/data_models/#team-roster","text":"(Manages which players are on the team and their current status) CREATE TABLE team_roster ( id INTEGER PRIMARY KEY, team_id INTEGER NOT NULL, player_id INTEGER NOT NULL, status VARCHAR(50) NOT NULL DEFAULT 'active', -- e.g., 'active', 'injured_reserve' UNIQUE(team_id, player_id), FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE, FOREIGN KEY (player_id) REFERENCES player(id) ON DELETE CASCADE );","title":"Team Roster"},{"location":"technical/data_models/#depth-charts","text":"(Defines the strategic packages or formations a team uses) CREATE TABLE depth_chart ( id INTEGER PRIMARY KEY, team_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, -- e.g., \"Base Offense\", \"Nickel Defense\" is_default BOOLEAN NOT NULL DEFAULT FALSE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE, UNIQUE(team_id, name) );","title":"Depth Charts"},{"location":"technical/data_models/#depth-chart-positions","text":"(Assigns players from the roster to specific positions and depths within a strategic package) CREATE TABLE depth_chart_position ( id INTEGER PRIMARY KEY, depth_chart_id INTEGER NOT NULL, player_id INTEGER NOT NULL, position_id INTEGER NOT NULL, depth_order INTEGER NOT NULL, FOREIGN KEY (depth_chart_id) REFERENCES depth_chart(id) ON DELETE CASCADE, FOREIGN KEY (player_id) REFERENCES player(id) ON DELETE CASCADE, FOREIGN KEY (position_id) REFERENCES player_position(id) ON DELETE RESTRICT, UNIQUE(depth_chart_id, position_id, depth_order) );","title":"Depth Chart Positions"},{"location":"technical/data_models/#constraintrelationship-notes_9","text":"Primary Key : id - Unique identifier for each team Foreign Keys : world_id - Links to the world this team exists in city_id - Team's home city location (RESTRICT prevents deletion of cities with teams) Team Identity : Name, colors, mascot, and logo define team branding Leadership : The owner_staff_id and head_coach_staff_id fields link directly to the staff table. This provides a formal connection to the individuals filling these roles, allowing the simulation to access their attributes and personalities. Multi-League Membership : Teams can participate in multiple leagues simultaneously League Structure : Teams can be assigned to specific conferences/divisions within each league Team Artwork : Flexible system for storing multiple artwork types Artwork types: 'logo', 'helmet', 'jersey_home', 'jersey_away', 'banner', 'mascot_image' Primary flag indicates main artwork for each type Budget : Team's available funds for operations and player salaries Geographic Inheritance : Teams inherit economic and cultural modifiers from their city location Stadium Relationships : Teams can play in multiple stadiums - relationships will be managed through separate stadium and team_stadium tables Future Expansion : Team facilities, staff, and historical records will be stored in separate tables","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#playbook-model","text":"Represents a collection of plays that a team can use. CREATE TABLE playbook ( id INTEGER PRIMARY KEY, team_id INTEGER, name VARCHAR(100) NOT NULL, description TEXT, is_default BOOLEAN NOT NULL DEFAULT FALSE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE SET NULL );","title":"Playbook Model"},{"location":"technical/data_models/#constraintrelationship-notes_10","text":"team_id : The team this playbook belongs to. Can be NULL for default, system-wide playbooks. is_default : Flags playbooks that are available to all teams.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#play-design-model","text":"Defines the abstract concept of a single football play. CREATE TABLE play_design ( id INTEGER PRIMARY KEY, playbook_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, play_type VARCHAR(50) NOT NULL, formation VARCHAR(50), base_description TEXT, FOREIGN KEY (playbook_id) REFERENCES playbook(id) ON DELETE CASCADE );","title":"Play Design Model"},{"location":"technical/data_models/#constraintrelationship-notes_11","text":"play_type : Categorical type (e.g., 'RUSH', 'PASS', 'PUNT', 'FIELD_GOAL'). base_description : A template for the text log, e.g., \"{QB_NAME} hands off to {RB_NAME}...\".","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#stadium-model","text":"The Stadium table represents the physical venues where games are played. Each stadium has a location, capacity, and specific characteristics that can affect gameplay. CREATE TABLE stadium ( id INTEGER PRIMARY KEY, world_id INTEGER NOT NULL, city_id INTEGER NOT NULL, name VARCHAR(100) NOT NULL, capacity INTEGER NOT NULL, year_built INTEGER, stadium_type VARCHAR(20) NOT NULL DEFAULT 'open_air', playing_surface VARCHAR(20) NOT NULL DEFAULT 'grass', created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE, FOREIGN KEY (city_id) REFERENCES city(id) ON DELETE RESTRICT );","title":"Stadium Model"},{"location":"technical/data_models/#constraintrelationship-notes_12","text":"Primary Key : id - Unique identifier for each stadium. Foreign Keys : world_id - Links the stadium to the world it exists in. city_id - The stadium's home city, which also links it to the cascading modifier system. RESTRICT prevents deleting a city that has a stadium. Attributes : stadium_type : Categorical type of stadium (e.g., 'open_air', 'retractable_roof', 'dome'). playing_surface : The type of field turf (e.g., 'grass', 'artificial_turf', 'hybrid'). Team Relationship : A team's home stadium will be defined through a separate team_stadium relationship table.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#entity-generation-models","text":"These models provide a flexible, data-driven framework for generating new entities like players. This system uses archetypes to define templates and configurations to control their spawn rates over time and across different contexts (e.g., for a specific league or country).","title":"Entity Generation Models"},{"location":"technical/data_models/#archetype-model","text":"The Archetype table defines templates for different types of entities. For players, this could be 'Pocket Passer QB' or 'Coverage Safety'. CREATE TABLE archetype ( id INTEGER PRIMARY KEY, entity_type VARCHAR(50) NOT NULL, name VARCHAR(100) NOT NULL, description TEXT, is_active BOOLEAN NOT NULL DEFAULT TRUE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, UNIQUE(entity_type, name) );","title":"Archetype Model"},{"location":"technical/data_models/#supporting-tables_2","text":"","title":"Supporting Tables"},{"location":"technical/data_models/#archetype-attributes","text":"CREATE TABLE archetype_attribute ( id INTEGER PRIMARY KEY, archetype_id INTEGER NOT NULL, attribute_name VARCHAR(50) NOT NULL, base_value INTEGER NOT NULL, FOREIGN KEY (archetype_id) REFERENCES archetype(id) ON DELETE CASCADE, UNIQUE(archetype_id, attribute_name) );","title":"Archetype Attributes"},{"location":"technical/data_models/#constraintrelationship-notes_13","text":"Primary Key : id - Unique identifier for each archetype. entity_type : The kind of entity this archetype defines (e.g., 'player', 'coach'). archetype_attribute : This table stores the baseline values for all relevant attributes of an archetype (e.g., for a player archetype, attribute_name could be 'speed' or 'strength'). The generation logic will use this base_value and apply randomization to create unique individuals.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#generation-configuration-model","text":"This polymorphic table defines how frequently different archetypes should be generated for a given scope (e.g., a league, a country, or globally). This allows generation logic to change over time and by region. CREATE TABLE generation_config ( id INTEGER PRIMARY KEY, config_scope VARCHAR(50) NOT NULL, scope_id INTEGER NOT NULL, archetype_id INTEGER NOT NULL, spawn_weight INTEGER NOT NULL DEFAULT 100, start_year INTEGER NOT NULL, end_year INTEGER, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (archetype_id) REFERENCES archetype(id) ON DELETE CASCADE );","title":"Generation Configuration Model"},{"location":"technical/data_models/#constraintrelationship-notes_14","text":"Polymorphic Scope : config_scope : Defines the context for this configuration (e.g., 'world', 'league', 'country'). scope_id : The ID of the record in the table defined by config_scope . archetype_id : The archetype this configuration applies to. spawn_weight : A relative weight determining the probability of this archetype being generated within its scope. Higher values are more common. start_year / end_year : Defines the range of seasons (inclusive) during which this configuration is active, allowing for player generation to evolve over time. end_year can be NULL for an indefinite period.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#people-character-models","text":"","title":"People &amp; Character Models"},{"location":"technical/data_models/#individual-model","text":"The Individual table is the base representation for any person in the game world, including players, coaches, owners, and staff. It stores common personal information and personality traits. CREATE TABLE individual ( id INTEGER PRIMARY KEY, world_id INTEGER NOT NULL, first_name VARCHAR(50) NOT NULL, last_name VARCHAR(50) NOT NULL, birth_date DATE NOT NULL, home_city_id INTEGER NOT NULL, desire_to_win INTEGER NOT NULL DEFAULT 50, greed INTEGER NOT NULL DEFAULT 50, demeanor INTEGER NOT NULL DEFAULT 50, luck INTEGER NOT NULL DEFAULT 50, loyalty INTEGER NOT NULL DEFAULT 50, patience INTEGER NOT NULL DEFAULT 50, likability INTEGER NOT NULL DEFAULT 50, is_draft_eligible BOOLEAN NOT NULL DEFAULT FALSE, draft_year INTEGER, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE, FOREIGN KEY (home_city_id) REFERENCES city(id) ON DELETE RESTRICT );","title":"Individual Model"},{"location":"technical/data_models/#constraintrelationship-notes_15","text":"Primary Key : id - Unique identifier for each individual. Foreign Keys : world_id - Links the individual to a specific game world. home_city_id - The individual's home city, which determines their home state and country. Personality Ratings : Scored 1-100, influencing decisions and interactions. desire_to_win : Competitiveness. greed : Focus on financial gain. demeanor : Public and private temperament. luck : A general modifier for random events. loyalty : Willingness to stay with current teams, friends, etc. patience : Tolerance for lack of success or development. Relationships : The generic relationship table manages connections between entities, including individual-to-individual relationships like family, friendships, or rivalries. Character Roles : This table serves as a base, with specific roles like Player or Coach defined in other tables that link back to this one. Draft Status : is_draft_eligible and draft_year manage a player's entry into the league draft pool.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#player-position-model","text":"This table is a simple lookup that defines all valid player positions in the game, ensuring standardization. CREATE TABLE player_position ( id INTEGER PRIMARY KEY, name VARCHAR(50) NOT NULL UNIQUE, abbreviation VARCHAR(5) NOT NULL UNIQUE, position_group VARCHAR(10) NOT NULL -- e.g., 'QB', 'RB', 'WR', 'OL', 'DL', 'LB', 'DB', 'K', 'P' );","title":"Player Position Model"},{"location":"technical/data_models/#constraintrelationship-notes_16","text":"position_group : A categorical assignment for easier logic filtering and AI substitutions (e.g., 'QB', 'RB', 'WR', 'OL', 'DL', 'LB', 'DB', 'K', 'P').","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#player-model","text":"The Player table contains all athletic attributes and game-specific information for an individual who is a football player. It links to an Individual record for personal details. CREATE TABLE player ( id INTEGER PRIMARY KEY, individual_id INTEGER NOT NULL UNIQUE, is_active BOOLEAN NOT NULL DEFAULT TRUE, status VARCHAR(50) NOT NULL DEFAULT 'free_agent', speed INTEGER NOT NULL, explosiveness INTEGER NOT NULL, strength INTEGER NOT NULL, stamina INTEGER NOT NULL, catching INTEGER NOT NULL, ball_security INTEGER NOT NULL, footwork INTEGER NOT NULL, breaking_tackles INTEGER NOT NULL, anticipation INTEGER NOT NULL, blocking_power INTEGER NOT NULL, blocking_technique INTEGER NOT NULL, shed_blocks INTEGER NOT NULL, tackling INTEGER NOT NULL, teamwork INTEGER NOT NULL, communication INTEGER NOT NULL, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (individual_id) REFERENCES individual(id) ON DELETE CASCADE );","title":"Player Model"},{"location":"technical/data_models/#supporting-tables_3","text":"","title":"Supporting Tables"},{"location":"technical/data_models/#player-stats-history","text":"CREATE TABLE player_stats_history ( id INTEGER PRIMARY KEY, player_id INTEGER NOT NULL, season_year INTEGER NOT NULL, level VARCHAR(50) NOT NULL, team_name VARCHAR(100), -- Statistical fields for all positions will be columns here created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (player_id) REFERENCES player(id) ON DELETE CASCADE );","title":"Player Stats History"},{"location":"technical/data_models/#constraintrelationship-notes_17","text":"Primary Key : id - Unique identifier for each player record. Foreign Key : individual_id - A one-to-one link to the Individual table for personal data. Status : Player's current status (e.g., 'free_agent', 'on_roster', 'injured', 'retired'). Athletic Ratings : Scored 1-100, representing the player's skills on the field. Team Relationship : A player's contractual relationship with a team is managed through the player_contract and player_contract_year tables. Statistical History : The player_stats_history table tracks a player's performance at various levels (e.g., 'high_school', 'college', 'pro') throughout their career.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#personnel-contracts-staff-models","text":"This section contains every table related to contracts, salaries, and employment for both players and staff. This makes the financial and team management aspects of the schema much easier to understand as a single system.","title":"Personnel, Contracts &amp; Staff Models"},{"location":"technical/data_models/#player-contract-model","text":"The Player Contract table holds the overarching terms of an agreement between a player and a team, including duration, options, and special clauses. CREATE TABLE player_contract ( id INTEGER PRIMARY KEY, player_id INTEGER NOT NULL, team_id INTEGER NOT NULL, start_year INTEGER NOT NULL, total_years INTEGER NOT NULL, no_trade_clause BOOLEAN NOT NULL DEFAULT FALSE, team_option_year INTEGER, player_option_year INTEGER, is_active BOOLEAN NOT NULL DEFAULT TRUE, FOREIGN KEY (player_id) REFERENCES player(id) ON DELETE CASCADE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE );","title":"Player Contract Model"},{"location":"technical/data_models/#constraintrelationship-notes_18","text":"Links : Connects a player to a team . Duration : start_year and total_years define the guaranteed length of the contract. no_trade_clause : A boolean flag to prevent the player from being traded. Options : team_option_year and player_option_year are nullable integers. If a value is present, it indicates the season in which a team or player option can be exercised to extend the contract. is_active : Flags the player's current contract. A player can have historical (inactive) contracts but only one active one.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#player-contract-year-model","text":"This table stores the year-by-year financial details for a specific contract, allowing for salary structures that change over the life of the deal. CREATE TABLE player_contract_year ( id INTEGER PRIMARY KEY, player_contract_id INTEGER NOT NULL, season_year INTEGER NOT NULL, base_salary_usd DECIMAL(12,2) NOT NULL, signing_bonus_proration_usd DECIMAL(12,2) NOT NULL DEFAULT 0.00, performance_bonus_usd DECIMAL(12,2) NOT NULL DEFAULT 0.00, performance_bonus_criteria TEXT, is_guaranteed BOOLEAN NOT NULL DEFAULT TRUE, UNIQUE (player_contract_id, season_year), FOREIGN KEY (player_contract_id) REFERENCES player_contract(id) ON DELETE CASCADE );","title":"Player Contract Year Model"},{"location":"technical/data_models/#constraintrelationship-notes_19","text":"Foreign Key : Links each yearly breakdown to a master player_contract . Unique Constraint : Ensures there is only one financial record per year for any given contract. Financials : Defines the player's compensation for that specific season_year . performance_bonus_criteria : A text field describing the conditions that must be met for the bonus to be earned (e.g., \"1200+ rushing yards\", \"Pro Bowl selection\"). This allows for flexible, readable bonus terms.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#staff-role-type-model","text":"This is a lookup table that defines all possible job roles in the game world, both for team personnel and personal staff. CREATE TABLE staff_role_type ( id INTEGER PRIMARY KEY, name VARCHAR(100) NOT NULL UNIQUE, category VARCHAR(50) NOT NULL, description TEXT );","title":"Staff Role Type Model"},{"location":"technical/data_models/#constraintrelationship-notes_20","text":"name : The user-facing name of the role (e.g., 'Head Coach', 'Financial Advisor'). category : A broader grouping for logic and UI (e.g., 'Coaching Staff', 'Medical Staff', 'Personal Finance', 'Personal Legal').","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#staff-model","text":"The Staff table is the base for any non-player individual who is employed. It links an individual to their employer, which can be either a team or another individual . It holds universal employment data like salary and contract terms. CREATE TABLE staff ( id INTEGER PRIMARY KEY, individual_id INTEGER NOT NULL UNIQUE, staff_role_type_id INTEGER NOT NULL, employer_team_id INTEGER, employer_individual_id INTEGER, role_title VARCHAR(100) NOT NULL, salary_usd DECIMAL(12,2) NOT NULL, contract_start_year INTEGER NOT NULL, contract_years INTEGER NOT NULL, status VARCHAR(50) NOT NULL DEFAULT 'active', FOREIGN KEY (individual_id) REFERENCES individual(id) ON DELETE CASCADE, FOREIGN KEY (staff_role_type_id) REFERENCES staff_role_type(id) ON DELETE RESTRICT, FOREIGN KEY (employer_team_id) REFERENCES team(id) ON DELETE SET NULL, FOREIGN KEY (employer_individual_id) REFERENCES individual(id) ON DELETE SET NULL, CONSTRAINT check_single_employer CHECK ( (employer_team_id IS NOT NULL AND employer_individual_id IS NULL) OR (employer_team_id IS NULL AND employer_individual_id IS NOT NULL) ) );","title":"Staff Model"},{"location":"technical/data_models/#constraintrelationship-notes_21","text":"Foreign Keys : Links to the person ( individual_id ) and their job definition ( staff_role_type_id ). Flexible Employer : employer_team_id is for team staff. employer_individual_id is for personal staff. check_single_employer : This crucial database constraint ensures that a staff member must have exactly one employer\u2014either a team OR an individual, but never both or neither. role_title : The specific title for this instance of the role (e.g. 'Offensive Coordinator' is a title for the 'Coach' role type).","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#financial-advisor-attributes-model","text":"Stores attributes specific only to financial advisors. CREATE TABLE financial_advisor_attributes ( staff_id INTEGER PRIMARY KEY, investment_skill INTEGER NOT NULL DEFAULT 50, risk_tolerance_philosophy VARCHAR(100), specialty VARCHAR(100), FOREIGN KEY (staff_id) REFERENCES staff(id) ON DELETE CASCADE );","title":"Financial Advisor Attributes Model"},{"location":"technical/data_models/#legal-advisor-attributes-model","text":"Stores attributes specific only to lawyers/agents. CREATE TABLE legal_advisor_attributes ( staff_id INTEGER PRIMARY KEY, contract_negotiation_skill INTEGER NOT NULL DEFAULT 50, litigation_skill INTEGER NOT NULL DEFAULT 50, bar_association_number VARCHAR(100), FOREIGN KEY (staff_id) REFERENCES staff(id) ON DELETE CASCADE );","title":"Legal Advisor Attributes Model"},{"location":"technical/data_models/#personal-wellness-attributes-model","text":"A generic table for personal staff focused on the character's well-being, such as chefs or personal trainers. CREATE TABLE personal_wellness_attributes ( staff_id INTEGER PRIMARY KEY, effectiveness_skill INTEGER NOT NULL DEFAULT 50, specialty VARCHAR(100), FOREIGN KEY (staff_id) REFERENCES staff(id) ON DELETE CASCADE );","title":"Personal Wellness Attributes Model"},{"location":"technical/data_models/#coach-attributes-model","text":"Stores attributes specific to coaches, influencing their AI behavior. CREATE TABLE coach_attributes ( staff_id INTEGER PRIMARY KEY, play_calling_skill INTEGER NOT NULL DEFAULT 50, risk_tolerance INTEGER NOT NULL DEFAULT 50, preferred_style VARCHAR(100), FOREIGN KEY (staff_id) REFERENCES staff(id) ON DELETE CASCADE );","title":"Coach Attributes Model"},{"location":"technical/data_models/#game-simulation-models","text":"These models define the structure for managing an active game and recording the results of individual play simulations. They form the link between the static team/player data and the dynamic simulation engine.","title":"Game &amp; Simulation Models"},{"location":"technical/data_models/#game-model","text":"The Game table stores the static, high-level information about a single football game matchup, such as the teams involved, location, and date. CREATE TABLE game ( id INTEGER PRIMARY KEY, world_id INTEGER NOT NULL, home_team_id INTEGER NOT NULL, away_team_id INTEGER NOT NULL, stadium_id INTEGER NOT NULL, game_date TIMESTAMPTZ NOT NULL, season_year INTEGER NOT NULL, week_number INTEGER, game_slot INTEGER, status VARCHAR(20) NOT NULL DEFAULT 'scheduled', created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (world_id) REFERENCES world(id) ON DELETE CASCADE, FOREIGN KEY (home_team_id) REFERENCES team(id) ON DELETE CASCADE, FOREIGN KEY (away_team_id) REFERENCES team(id) ON DELETE CASCADE, FOREIGN KEY (stadium_id) REFERENCES stadium(id) ON DELETE RESTRICT );","title":"Game Model"},{"location":"technical/data_models/#constraintrelationship-notes_22","text":"Primary Key : id - Unique identifier for each game. Foreign Keys : stadium_id - Links the game to the stadium where it was played. RESTRICT prevents deleting a stadium if it has games associated with it. Status : The current state of the game (e.g., 'scheduled', 'in_progress', 'final'). State Separation : The dynamic, play-by-play state of the game (score, clock, possession) is stored in the separate game_state table.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#game-state-model","text":"This table tracks the dynamic state of a single game, which is updated after every play. It holds all the information that changes during the game, such as score, time, and ball position. CREATE TABLE game_state ( game_id INTEGER PRIMARY KEY, home_score INTEGER NOT NULL DEFAULT 0, away_score INTEGER NOT NULL DEFAULT 0, current_quarter INTEGER, time_remaining_in_quarter INTEGER, team_with_possession_id INTEGER, down INTEGER, distance INTEGER, ball_on_yard_line INTEGER, is_drive_active BOOLEAN NOT NULL DEFAULT FALSE, drive_start_yard_line INTEGER, drive_start_time_in_quarter INTEGER, FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE, FOREIGN KEY (team_with_possession_id) REFERENCES team(id) ON DELETE SET NULL );","title":"Game State Model"},{"location":"technical/data_models/#constraintrelationship-notes_23","text":"Primary Key : game_id - This creates a one-to-one relationship with the game table. Game State Fields : time_remaining_in_quarter : Measured in seconds. ball_on_yard_line : Represents the position of the ball from the perspective of the offense's goal line (e.g., a value of 25 means the ball is on the offense's own 25-yard line). Drive Tracking : is_drive_active , drive_start_yard_line , and drive_start_time_in_quarter are used by the simulation engine to manage a single possession. Note on the Field Model : The game_state table stores the persistent state of a game between plays. The detailed, coordinate-based \"Field Model\" described in the architecture notes is a transient, in-memory data structure used by the simulation engine during the execution of a single play. The results are then captured in the play table and used to update this game_state record.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#game-plan-model","text":"Stores the high-level strategic instructions for a team for a specific game, influencing the AI coach's play-calling decisions. CREATE TABLE game_plan ( id INTEGER PRIMARY KEY, game_id INTEGER NOT NULL, team_id INTEGER NOT NULL, pass_run_ratio DECIMAL(3,2) NOT NULL DEFAULT 0.50, -- 0.0 = 100% run, 1.0 = 100% pass offensive_aggression INTEGER NOT NULL DEFAULT 50, -- 1-100 scale for 4th down attempts, trick plays defensive_aggression INTEGER NOT NULL DEFAULT 50, -- 1-100 scale for blitzing, all-out coverage UNIQUE(game_id, team_id), FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE );","title":"Game Plan Model"},{"location":"technical/data_models/#constraintrelationship-notes_24","text":"Unique Constraint : Ensures each team has only one game plan per game. Ratios & Scales : These values provide high-level guidance to the simulation engine's AI. pass_run_ratio : Governs the tendency to call pass plays vs. run plays. offensive_aggression : Influences decisions like going for it on 4th down. defensive_aggression : Influences the frequency of blitzes vs. conservative coverage.","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#coach-instruction-log-model","text":"Logs the instructions a user gives to their AI coach during a game, providing a history of their strategic decisions. CREATE TABLE coach_instruction_log ( id INTEGER PRIMARY KEY, game_id INTEGER NOT NULL, team_id INTEGER NOT NULL, quarter INTEGER, play_number INTEGER, instruction_text TEXT NOT NULL, was_override BOOLEAN NOT NULL DEFAULT FALSE, created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE );","title":"Coach Instruction Log Model"},{"location":"technical/data_models/#play-model","text":"The Play table serves as a historical log, recording the key details and outcome of every single play that occurs within a game. CREATE TABLE play ( id INTEGER PRIMARY KEY, game_id INTEGER NOT NULL, play_number INTEGER NOT NULL, offense_team_id INTEGER NOT NULL, defense_team_id INTEGER NOT NULL, offense_play_design_id INTEGER, defense_play_design_id INTEGER, quarter INTEGER NOT NULL, down INTEGER, distance INTEGER, start_yard_line INTEGER, end_yard_line INTEGER, result_type VARCHAR(50), yards_gained INTEGER NOT NULL, play_description TEXT, turnover_type VARCHAR(50), created_date TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE, FOREIGN KEY (offense_team_id) REFERENCES team(id) ON DELETE CASCADE, FOREIGN KEY (defense_team_id) REFERENCES team(id) ON DELETE CASCADE, FOREIGN KEY (offense_play_design_id) REFERENCES play_design(id) ON DELETE SET NULL, FOREIGN KEY (defense_play_design_id) REFERENCES play_design(id) ON DELETE SET NULL );","title":"Play Model"},{"location":"technical/data_models/#constraintrelationship-notes_25","text":"Primary Key : id - Unique identifier for each play record. Foreign Keys : game_id links the play to the specific game it occurred in. Play Calling : The offense_play_design_id and defense_play_design_id fields link to the specific plays called by each team's AI, creating a crucial record of strategic decisions versus outcomes. These are nullable to account for plays without a formal design (e.g., penalties before the snap). Play Log : This table provides a complete, sequential record of a game's events, which can be used for box scores, recaps, and analysis. result_type : A categorical description of the play (e.g., 'RUSH', 'PASS_COMPLETE', 'PASS_INCOMPLETE', 'PUNT', 'FIELD_GOAL_MADE', 'PENALTY'). turnover_type : Specifies the type of turnover, if any (e.g., 'INTERCEPTION', 'FUMBLE_LOST').","title":"Constraint/Relationship notes"},{"location":"technical/data_models/#scoring-summary-model","text":"A dedicated table to track every scoring play in a game. This provides an easy-to-query source for building a game's scoring summary without parsing the full play-by-play log. CREATE TABLE scoring_summary ( id INTEGER PRIMARY KEY, play_id INTEGER NOT NULL, game_id INTEGER NOT NULL, scoring_team_id INTEGER NOT NULL, quarter INTEGER NOT NULL, time_remaining_in_quarter INTEGER NOT NULL, points_scored INTEGER NOT NULL, scoring_play_type VARCHAR(50) NOT NULL, description TEXT, FOREIGN KEY (play_id) REFERENCES play(id) ON DELETE CASCADE, FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE, FOREIGN KEY (scoring_team_id) REFERENCES team(id) ON DELETE CASCADE );","title":"Scoring Summary Model"},{"location":"technical/data_models/#player-game-stats-model","text":"Stores the aggregated statistics for a single player in a single game. This table is the source for box scores. CREATE TABLE player_game_stats ( id INTEGER PRIMARY KEY, game_id INTEGER NOT NULL, player_id INTEGER NOT NULL, team_id INTEGER NOT NULL, -- Passing Stats pass_attempts INTEGER DEFAULT 0, pass_completions INTEGER DEFAULT 0, pass_yards INTEGER DEFAULT 0, pass_touchdowns INTEGER DEFAULT 0, pass_interceptions INTEGER DEFAULT 0, -- Rushing Stats rush_attempts INTEGER DEFAULT 0, rush_yards INTEGER DEFAULT 0, rush_touchdowns INTEGER DEFAULT 0, -- Receiving Stats receptions INTEGER DEFAULT 0, receiving_yards INTEGER DEFAULT 0, receiving_touchdowns INTEGER DEFAULT 0, -- Defensive Stats tackles INTEGER DEFAULT 0, sacks DECIMAL(3,1) DEFAULT 0.0, interceptions_caught INTEGER DEFAULT 0, -- Special Teams Stats field_goals_made INTEGER DEFAULT 0, field_goals_attempted INTEGER DEFAULT 0, punts INTEGER DEFAULT 0, punt_yards INTEGER DEFAULT 0, -- Return Stats kick_returns INTEGER DEFAULT 0, kick_return_yards INTEGER DEFAULT 0, kick_return_touchdowns INTEGER DEFAULT 0, punt_returns INTEGER DEFAULT 0, punt_return_yards INTEGER DEFAULT 0, punt_return_touchdowns INTEGER DEFAULT 0, UNIQUE(game_id, player_id), FOREIGN KEY (game_id) REFERENCES game(id) ON DELETE CASCADE, FOREIGN KEY (player_id) REFERENCES player(id) ON DELETE CASCADE, FOREIGN KEY (team_id) REFERENCES team(id) ON DELETE CASCADE );","title":"Player Game Stats Model"},{"location":"technical/technical_info/","text":"Technology Stack Frontend: PHP and vanilla JavaScript Simulation Engine: Python Database: PostgreSQL (for all data, including authentication and game world)","title":"Technology Stack"},{"location":"technical/technical_info/#technology-stack","text":"Frontend: PHP and vanilla JavaScript Simulation Engine: Python Database: PostgreSQL (for all data, including authentication and game world)","title":"Technology Stack"}]}